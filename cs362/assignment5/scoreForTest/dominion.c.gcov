        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:1
        -:    1:// Assignment 2, CS362-400-W16
        -:    2:// Andrew M. Calhoun
        -:    3:// calhouna@oregonstate.edu
        -:    4:// Due Date: 1/17/2016
        -:    5:
        -:    6:#include "dominion.h"
        -:    7:#include "dominion_helpers.h"
        -:    8:#include "rngs.h"
        -:    9:#include <stdio.h>
        -:   10:#include <math.h>
        -:   11:#include <stdlib.h>
        -:   12:
        -:   13:
        -:   14:
     5676:   15:int compare(const void* a, const void* b) {
     5676:   16:  if (*(int*)a > *(int*)b)
     2674:   17:    return 1;
     3002:   18:  if (*(int*)a < *(int*)b)
      894:   19:    return -1;
     2108:   20:  return 0;
        -:   21:}
        -:   22:
    #####:   23:struct gameState* newGame() {
    #####:   24:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   25:  return g;
        -:   26:}
        -:   27:
    #####:   28:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   29:		  int k8, int k9, int k10) {
    #####:   30:  int* k = malloc(10 * sizeof(int));
    #####:   31:  k[0] = k1;
    #####:   32:  k[1] = k2;
    #####:   33:  k[2] = k3;
    #####:   34:  k[3] = k4;
    #####:   35:  k[4] = k5;
    #####:   36:  k[5] = k6;
    #####:   37:  k[6] = k7;
    #####:   38:  k[7] = k8;
    #####:   39:  k[8] = k9;
    #####:   40:  k[9] = k10;
    #####:   41:  return k;
        -:   42:}
        -:   43:
        8:   44:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   45:		   struct gameState *state) {
        -:   46:
        -:   47:  int i;
        -:   48:  int j;
        -:   49:  int it;
        -:   50:  //set up random number generator
        8:   51:  SelectStream(1);
        8:   52:  PutSeed((long)randomSeed);
        -:   53:
        -:   54:  //check number of players
        8:   55:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   56:    {
    #####:   57:      return -1;
        -:   58:    }
        -:   59:
        -:   60:  //set number of players
        8:   61:  state->numPlayers = numPlayers;
        -:   62:
        -:   63:  //check selected kingdom cards are different
       88:   64:  for (i = 0; i < 10; i++)
        -:   65:    {
      880:   66:      for (j = 0; j < 10; j++)
        -:   67:        {
      800:   68:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   69:	    {
    #####:   70:	      return -1;
        -:   71:	    }
        -:   72:        }
        -:   73:    }
        -:   74:
        -:   75:
        -:   76:  //initialize supply
        -:   77:  ///////////////////////////////
        -:   78:
        -:   79:  //set number of Curse cards
        8:   80:  if (numPlayers == 2)
        -:   81:    {
        8:   82:      state->supplyCount[curse] = 10;
        -:   83:    }
    #####:   84:  else if (numPlayers == 3)
        -:   85:    {
    #####:   86:      state->supplyCount[curse] = 20;
        -:   87:    }
        -:   88:  else
        -:   89:    {
    #####:   90:      state->supplyCount[curse] = 30;
        -:   91:    }
        -:   92:
        -:   93:  //set number of Victory cards
        8:   94:  if (numPlayers == 2)
        -:   95:    {
        8:   96:      state->supplyCount[estate] = 8;
        8:   97:      state->supplyCount[duchy] = 8;
        8:   98:      state->supplyCount[province] = 8;
        -:   99:    }
        -:  100:  else
        -:  101:    {
    #####:  102:      state->supplyCount[estate] = 12;
    #####:  103:      state->supplyCount[duchy] = 12;
    #####:  104:      state->supplyCount[province] = 12;
        -:  105:    }
        -:  106:
        -:  107:  //set number of Treasure cards
        8:  108:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        8:  109:  state->supplyCount[silver] = 40;
        8:  110:  state->supplyCount[gold] = 30;
        -:  111:
        -:  112:  //set number of Kingdom cards
      168:  113:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  114:    {
     1320:  115:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  116:	{
     1240:  117:	  if (kingdomCards[j] == i)
        -:  118:	    {
        -:  119:	      //check if card is a 'Victory' Kingdom card
       88:  120:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  121:		{
        8:  122:		  if (numPlayers == 2){
        8:  123:		    state->supplyCount[i] = 8;
        -:  124:		  }
    #####:  125:		  else{ state->supplyCount[i] = 12; }
        -:  126:		}
        -:  127:	      else
        -:  128:		{
       72:  129:		  state->supplyCount[i] = 10;
        -:  130:		}
       80:  131:	      break;
        -:  132:	    }
        -:  133:	  else    //card is not in the set choosen for the game
        -:  134:	    {
     1160:  135:	      state->supplyCount[i] = -1;
        -:  136:	    }
        -:  137:	}
        -:  138:
        -:  139:    }
        -:  140:
        -:  141:  ////////////////////////
        -:  142:  //supply initialization complete
        -:  143:
        -:  144:  //set player decks
       24:  145:  for (i = 0; i < numPlayers; i++)
        -:  146:    {
       16:  147:      state->deckCount[i] = 0;
       64:  148:      for (j = 0; j < 3; j++)
        -:  149:	{
       48:  150:	  state->deck[i][j] = estate;
       48:  151:	  state->deckCount[i]++;
        -:  152:	}
      128:  153:      for (j = 3; j < 10; j++)
        -:  154:	{
      112:  155:	  state->deck[i][j] = copper;
      112:  156:	  state->deckCount[i]++;
        -:  157:	}
        -:  158:    }
        -:  159:
        -:  160:  //shuffle player decks
       24:  161:  for (i = 0; i < numPlayers; i++)
        -:  162:    {
       16:  163:      if ( shuffle(i, state) < 0 )
        -:  164:	{
    #####:  165:	  return -1;
        -:  166:	}
        -:  167:    }
        -:  168:
        -:  169:  //draw player hands
       24:  170:  for (i = 0; i < numPlayers; i++)
        -:  171:    {
        -:  172:      //initialize hand size to zero
       16:  173:      state->handCount[i] = 0;
       16:  174:      state->discardCount[i] = 0;
        -:  175:      //draw 5 cards
        -:  176:      // for (j = 0; j < 5; j++)
        -:  177:      //	{
        -:  178:      //	  drawCard(i, state);
        -:  179:      //	}
        -:  180:    }
        -:  181:
        -:  182:  //set embargo tokens to 0 for all supply piles
      224:  183:  for (i = 0; i <= treasure_map; i++)
        -:  184:    {
      216:  185:      state->embargoTokens[i] = 0;
        -:  186:    }
        -:  187:
        -:  188:  //initialize first player's turn
        8:  189:  state->outpostPlayed = 0;
        8:  190:  state->phase = 0;
        8:  191:  state->numActions = 1;
        8:  192:  state->numBuys = 1;
        8:  193:  state->playedCardCount = 0;
        8:  194:  state->whoseTurn = 0;
        8:  195:  state->handCount[state->whoseTurn] = 0;
        -:  196:  //int it; move to top
        -:  197:
        -:  198:  //Moved draw cards to here, only drawing at the start of a turn
       48:  199:  for (it = 0; it < 5; it++){
       40:  200:    drawCard(state->whoseTurn, state);
        -:  201:  }
        -:  202:
        8:  203:  updateCoins(state->whoseTurn, state, 0);
        -:  204:
        8:  205:  return 0;
        -:  206:}
        -:  207:
      143:  208:int shuffle(int player, struct gameState *state) {
        -:  209:
        -:  210:
        -:  211:  int newDeck[MAX_DECK];
      143:  212:  int newDeckPos = 0;
        -:  213:  int card;
        -:  214:  int i;
        -:  215:
      143:  216:  if (state->deckCount[player] < 1)
        2:  217:    return -1;
      141:  218:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  219:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  220:
     2320:  221:  while (state->deckCount[player] > 0) {
     2038:  222:    card = floor(Random() * state->deckCount[player]);
     2038:  223:    newDeck[newDeckPos] = state->deck[player][card];
     2038:  224:    newDeckPos++;
    10136:  225:    for (i = card; i < state->deckCount[player]-1; i++) {
     8098:  226:      state->deck[player][i] = state->deck[player][i+1];
        -:  227:    }
     2038:  228:    state->deckCount[player]--;
        -:  229:  }
     2179:  230:  for (i = 0; i < newDeckPos; i++) {
     2038:  231:    state->deck[player][i] = newDeck[i];
     2038:  232:    state->deckCount[player]++;
        -:  233:  }
        -:  234:
      141:  235:  return 0;
        -:  236:}
        -:  237:
      334:  238:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  239:{
        -:  240:  int card;
      334:  241:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  242:
        -:  243:  //check if it is the right phase
      334:  244:  if (state->phase != 0)
        -:  245:    {
    #####:  246:      return -1;
        -:  247:    }
        -:  248:
        -:  249:  //check if player has enough actions
      334:  250:  if ( state->numActions < 1 )
        -:  251:    {
    #####:  252:      return -1;
        -:  253:    }
        -:  254:
        -:  255:  //get card played
      334:  256:  card = handCard(handPos, state);
        -:  257:
        -:  258:  //check if selected card is an action
      334:  259:  if ( card < adventurer || card > treasure_map )
        -:  260:    {
      273:  261:      return -1;
        -:  262:    }
        -:  263:
        -:  264:  //play card
       61:  265:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  266:    {
       61:  267:      return -1;
        -:  268:    }
        -:  269:
        -:  270:  //reduce number of actions
    #####:  271:  state->numActions--;
        -:  272:
        -:  273:  //update coins (Treasure cards may be added with card draws)
    #####:  274:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  275:
    #####:  276:  return 0;
        -:  277:}
        -:  278:
      330:  279:int buyCard(int supplyPos, struct gameState *state) {
        -:  280:  int who;
      330:  281:  if (DEBUG){
        -:  282:    printf("Entering buyCard...\n");
        -:  283:  }
        -:  284:
        -:  285:  // I don't know what to do about the phase thing.
        -:  286:
      330:  287:  who = state->whoseTurn;
        -:  288:
      330:  289:  if (state->numBuys < 1){
    #####:  290:    if (DEBUG)
        -:  291:      printf("You do not have any buys left\n");
    #####:  292:    return -1;
      330:  293:  } else if (supplyCount(supplyPos, state) <1){
    #####:  294:    if (DEBUG)
        -:  295:      printf("There are not any of that type of card left\n");
    #####:  296:    return -1;
      330:  297:  } else if (state->coins < getCost(supplyPos)){
       35:  298:    if (DEBUG)
        -:  299:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
       35:  300:    return -1;
        -:  301:  } else {
      295:  302:    state->phase=1;
        -:  303:    //state->supplyCount[supplyPos]--;
      295:  304:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  305:
      295:  306:    state->coins = (state->coins) - (getCost(supplyPos));
      295:  307:    state->numBuys--;
      295:  308:    if (DEBUG)
        -:  309:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  310:  }
        -:  311:
        -:  312:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  313:  //state->discardCount[who]++;
        -:  314:
      295:  315:  return 0;
        -:  316:}
        -:  317:
     2525:  318:int numHandCards(struct gameState *state) {
     2525:  319:  return state->handCount[ whoseTurn(state) ];
        -:  320:}
        -:  321:
     5394:  322:int handCard(int handPos, struct gameState *state) {
     5394:  323:  int currentPlayer = whoseTurn(state);
     5394:  324:  return state->hand[currentPlayer][handPos];
        -:  325:}
        -:  326:
      625:  327:int supplyCount(int card, struct gameState *state) {
      625:  328:  return state->supplyCount[card];
        -:  329:}
        -:  330:
    #####:  331:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  332:  int i;
    #####:  333:  int count = 0;
        -:  334:
    #####:  335:  for (i = 0; i < state->deckCount[player]; i++)
        -:  336:    {
    #####:  337:      if (state->deck[player][i] == card) count++;
        -:  338:    }
        -:  339:
    #####:  340:  for (i = 0; i < state->handCount[player]; i++)
        -:  341:    {
    #####:  342:      if (state->hand[player][i] == card) count++;
        -:  343:    }
        -:  344:
    #####:  345:  for (i = 0; i < state->discardCount[player]; i++)
        -:  346:    {
    #####:  347:      if (state->discard[player][i] == card) count++;
        -:  348:    }
        -:  349:
    #####:  350:  return count;
        -:  351:}
        -:  352:
     8662:  353:int whoseTurn(struct gameState *state) {
     8662:  354:  return state->whoseTurn;
        -:  355:}
        -:  356:
      341:  357:int endTurn(struct gameState *state) {
        -:  358:  int k;
        -:  359:  int i;
      341:  360:  int currentPlayer = whoseTurn(state);
        -:  361:
        -:  362:  //Discard hand
     2159:  363:  for (i = 0; i < state->handCount[currentPlayer]; i++){
     1818:  364:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
     1818:  365:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  366:  }
      341:  367:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  368:
        -:  369:  //Code for determining the player
      341:  370:  if (currentPlayer < (state->numPlayers - 1)){
      172:  371:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  372:  }
        -:  373:  else{
      169:  374:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  375:  }
        -:  376:
      341:  377:  state->outpostPlayed = 0;
      341:  378:  state->phase = 0;
      341:  379:  state->numActions = 1;
      341:  380:  state->coins = 0;
      341:  381:  state->numBuys = 1;
      341:  382:  state->playedCardCount = 0;
      341:  383:  state->handCount[state->whoseTurn] = 0;
        -:  384:
        -:  385:  //int k; move to top
        -:  386:  //Next player draws hand
     2046:  387:  for (k = 0; k < 5; k++){
     1705:  388:    drawCard(state->whoseTurn, state);//Draw a card
        -:  389:  }
        -:  390:
        -:  391:  //Update money
      341:  392:  updateCoins(state->whoseTurn, state , 0);
        -:  393:
      341:  394:  return 0;
        -:  395:}
        -:  396:
      349:  397:int isGameOver(struct gameState *state) {
        -:  398:  int i;
        -:  399:  int j;
        -:  400:
        -:  401:  //if stack of Province cards is empty, the game ends
      349:  402:  if (state->supplyCount[province] == 0)
        -:  403:    {
        8:  404:      return 1;
        -:  405:    }
        -:  406:
        -:  407:  //if three supply pile are at 0, the game ends
      341:  408:  j = 0;
     8866:  409:  for (i = 0; i < 25; i++)
        -:  410:    {
     8525:  411:      if (state->supplyCount[i] == 0)
        -:  412:	{
    #####:  413:	  j++;
        -:  414:	}
        -:  415:    }
      341:  416:  if ( j >= 3)
        -:  417:    {
    #####:  418:      return 1;
        -:  419:    }
        -:  420:
      341:  421:  return 0;
        -:  422:}
        -:  423:
       16:  424:int scoreFor (int player, struct gameState *state) {
        -:  425:
        -:  426:  int i;
       16:  427:  int score = 0;
        -:  428:  //score from hand
       56:  429:  for (i = 0; i < state->handCount[player]; i++)
        -:  430:    {
       40:  431:      if (state->hand[player][i] == curse) { score = score - 1; };
       40:  432:      if (state->hand[player][i] == estate) { score = score + 1; };
       40:  433:      if (state->hand[player][i] == duchy) { score = score + 3; };
       40:  434:      if (state->hand[player][i] == province) { score = score + 6; };
       40:  435:      if (state->hand[player][i] == great_hall) { score = score + 1; };
       40:  436:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  437:    }
        -:  438:
        -:  439:  //score from discard
      270:  440:  for (i = 0; i < state->discardCount[player]; i++)
        -:  441:    {
      254:  442:      if (state->discard[player][i] == curse) { score = score - 1; };
      254:  443:      if (state->discard[player][i] == estate) { score = score + 1; };
      254:  444:      if (state->discard[player][i] == duchy) { score = score + 3; };
      254:  445:      if (state->discard[player][i] == province) { score = score + 6; };
      254:  446:      if (state->discard[player][i] == great_hall) { score = score + 1; };
      254:  447:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  448:    }
        -:  449:
        -:  450:  //score from deck
      270:  451:  for (i = 0; i < state->discardCount[player]; i++)
        -:  452:    {
      254:  453:      if (state->deck[player][i] == curse) { score = score - 1; };
      254:  454:      if (state->deck[player][i] == estate) { score = score + 1; };
      254:  455:      if (state->deck[player][i] == duchy) { score = score + 3; };
      254:  456:      if (state->deck[player][i] == province) { score = score + 6; };
      254:  457:      if (state->deck[player][i] == great_hall) { score = score + 1; };
      254:  458:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  459:    }
        -:  460:
       16:  461:  return score;
        -:  462:}
        -:  463:
    #####:  464:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  465:  int i;
        -:  466:  int j;
        -:  467:  int highScore;
        -:  468:  int currentPlayer;
        -:  469:
        -:  470:  //get score for each player
    #####:  471:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  472:    {
        -:  473:      //set unused player scores to -9999
    #####:  474:      if (i >= state->numPlayers)
        -:  475:	{
    #####:  476:	  players[i] = -9999;
        -:  477:	}
        -:  478:      else
        -:  479:	{
    #####:  480:	  players[i] = scoreFor (i, state);
        -:  481:	}
        -:  482:    }
        -:  483:
        -:  484:  //find highest score
    #####:  485:  j = 0;
    #####:  486:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  487:    {
    #####:  488:      if (players[i] > players[j])
        -:  489:	{
    #####:  490:	  j = i;
        -:  491:	}
        -:  492:    }
    #####:  493:  highScore = players[j];
        -:  494:
        -:  495:  //add 1 to players who had less turns
    #####:  496:  currentPlayer = whoseTurn(state);
    #####:  497:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  498:    {
    #####:  499:      if ( players[i] == highScore && i > currentPlayer )
        -:  500:	{
    #####:  501:	  players[i]++;
        -:  502:	}
        -:  503:    }
        -:  504:
        -:  505:  //find new highest score
    #####:  506:  j = 0;
    #####:  507:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  508:    {
    #####:  509:      if ( players[i] > players[j] )
        -:  510:	{
    #####:  511:	  j = i;
        -:  512:	}
        -:  513:    }
    #####:  514:  highScore = players[j];
        -:  515:
        -:  516:  //set winners in array to 1 and rest to 0
    #####:  517:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  518:    {
    #####:  519:      if ( players[i] == highScore )
        -:  520:	{
    #####:  521:	  players[i] = 1;
        -:  522:	}
        -:  523:      else
        -:  524:	{
    #####:  525:	  players[i] = 0;
        -:  526:	}
        -:  527:    }
        -:  528:
    #####:  529:  return 0;
        -:  530:}
        -:  531:
     1856:  532:int drawCard(int player, struct gameState *state)
        -:  533:{	int count;
        -:  534:  int deckCounter;
     1856:  535:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  536:
        -:  537:    //Step 1 Shuffle the discard pile back into a deck
        -:  538:    int i;
        -:  539:    //Move discard to deck
     2001:  540:    for (i = 0; i < state->discardCount[player];i++){
     1877:  541:      state->deck[player][i] = state->discard[player][i];
     1877:  542:      state->discard[player][i] = -1;
        -:  543:    }
        -:  544:
      124:  545:    state->deckCount[player] = state->discardCount[player];
      124:  546:    state->discardCount[player] = 0;//Reset discard
        -:  547:
        -:  548:    //Shufffle the deck
      124:  549:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  550:
      124:  551:    if (DEBUG){//Debug statements
        -:  552:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  553:    }
        -:  554:
      124:  555:    state->discardCount[player] = 0;
        -:  556:
        -:  557:    //Step 2 Draw Card
      124:  558:    count = state->handCount[player];//Get current player's hand count
        -:  559:
      124:  560:    if (DEBUG){//Debug statements
        -:  561:      printf("Current hand count: %d\n", count);
        -:  562:    }
        -:  563:
      124:  564:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  565:
      124:  566:    if (deckCounter == 0)
    #####:  567:      return -1;
        -:  568:
      124:  569:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
      124:  570:    state->deckCount[player]--;
      124:  571:    state->handCount[player]++;//Increment hand count
        -:  572:  }
        -:  573:
        -:  574:  else{
     1732:  575:    int count = state->handCount[player];//Get current hand count for player
        -:  576:    int deckCounter;
     1732:  577:    if (DEBUG){//Debug statements
        -:  578:      printf("Current hand count: %d\n", count);
        -:  579:    }
        -:  580:
     1732:  581:    deckCounter = state->deckCount[player];//Create holder for the deck count
     1732:  582:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     1732:  583:    state->deckCount[player]--;
     1732:  584:    state->handCount[player]++;//Increment hand count
        -:  585:  }
        -:  586:
     1856:  587:  return 0;
        -:  588:}
        -:  589:
        -:  590:// PLAY CARD FUNCTIONS ----------------------------------------------------------------------------------------------
        -:  591://
        -:  592:// PLAY ADVENTURER
        -:  593://
        -:  594:
       45:  595:int playAdventurer(struct gameState *state, int currentPlayer, int cardDrawn, int drawntreasure, int temphand[], int z)
        -:  596:{
        -:  597:
      153:  598:      while(drawntreasure<2){
       63:  599:	if (state->deckCount[currentPlayer] <=1){//if the deck is empty we need to shuffle discard and add to deck *** REFACTOR to <= will cause additional shuffling.
        3:  600:	  shuffle(currentPlayer, state);
        -:  601:	}
       63:  602:	drawCard(currentPlayer, state);
       63:  603:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
      108:  604:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
       45:  605:	  drawntreasure+=2; // The adventurer should not make off with your treasure. Originally had this put as --, but it actually caused the game to freeze. Opted to give the player more coins. Changes seeded outcomes.
        -:  606:	else{
       18:  607:	  temphand[z]=cardDrawn;
       18:  608:	  state->handCount[currentPlayer]++; //this should just remove the top card (the most recently drawn one).
       18:  609:	  z++;
        -:  610:	}
        -:  611:      }
      108:  612:      while(z-1>=0){
       18:  613:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
       18:  614:	z=z-1;
        -:  615:      }
       45:  616:      return 0;
        -:  617:}
        -:  618:
        -:  619://---------------------
        -:  620:// PLAY COUNCIL HALL
        -:  621://---------------------
    #####:  622:int playCouncRoom(struct gameState *state, int currentPlayer, int handPos)
        -:  623:{
        -:  624:    int i; // Needed to be declared under C99 standards, otherwise program breaks.
        -:  625:
        -:  626:    //+4 Cards ** REFACTORED TO 3 because of introduced bug.
    #####:  627:    for (i = 0; i < 4; ++i)
        -:  628:	{
    #####:  629:	  drawCard(currentPlayer, state);
        -:  630:	}
        -:  631:
        -:  632:      //+1 Buy
    #####:  633:      state->numBuys++;
        -:  634:
        -:  635:      //Each other player draws a card
    #####:  636:      for (i = 0; i < state->numPlayers; i++)
        -:  637:	{
    #####:  638:	  if ( i != currentPlayer )
        -:  639:	    {
    #####:  640:	      drawCard(i, state);
        -:  641:	    }
        -:  642:	}
        -:  643:
        -:  644:      //put played card in played card pile
    #####:  645:    discardCard(handPos, currentPlayer, state, 0);
        -:  646:
    #####:  647:    return 0;
        -:  648:}
        -:  649:
        -:  650://-------------------------------
        -:  651:// PLAY MINION
        -:  652://-------------------------------
        -:  653:
    #####:  654:int playMinion(struct gameState *state, int choice1, int choice2, int currentPlayer, int handPos)
        -:  655:{
        -:  656:
        -:  657:    int i, j;
        -:  658:
        -:  659:
        -:  660:      //+1 action
    #####:  661:      state->numActions--;
        -:  662:
        -:  663:      //discard card from hand
    #####:  664:      discardCard(handPos, currentPlayer, state, 0);
        -:  665:
    #####:  666:      if (choice1)		//+2 coins *** REFACTORED: -2 coins.
        -:  667:	{
    #####:  668:	  state->coins = state->coins - 2;
        -:  669:	}
        -:  670:
    #####:  671:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  672:	{
        -:  673:
        -:  674://	  //discard hand ** COMMENTED OUT FOR REFACTORING
        -:  675://	  while(numHandCards(state) > 0)
        -:  676://	    {
        -:  677://	      discardCard(handPos, currentPlayer, state, 0);
        -:  678://	    }
        -:  679:
        -:  680:	  //draw 4 *** REFACTORED TO DRAW 3
    #####:  681:	  for (i = 0; i < 3; i++)
        -:  682:	    {
    #####:  683:	      drawCard(currentPlayer, state);
        -:  684:	    }
        -:  685:
        -:  686:	  //other players discard hand and redraw if hand size > 4 *** REFACTOR: They not only get to keep their cards, they get 3 MORE!
    #####:  687:	  for (i = 0; i < state->numPlayers; i++)
        -:  688:	    {
    #####:  689:	      if (i != currentPlayer)
        -:  690:		{
    #####:  691:		  if ( state->handCount[i] > 4 )
        -:  692:		    {
        -:  693:		    //  //discard hand
        -:  694:		    //  while( state->handCount[i] > 0 )
        -:  695:			// {
        -:  696:			//  discardCard(handPos, i, state, 0);
        -:  697:			// }
        -:  698:
        -:  699:		      //draw 4 ** REFACTOR: 3
    #####:  700:		      for (j = 0; j < 3; j++)
        -:  701:			{
    #####:  702:			  drawCard(i, state);
        -:  703:			}
        -:  704:		    }
        -:  705:		}
        -:  706:	    }
        -:  707:
        -:  708:	}
    #####:  709:      return 0;
        -:  710:
        -:  711:}
        -:  712:
        -:  713://-------------------------------
        -:  714:// PLAY SMITHY
        -:  715://-------------------------------
        -:  716:
       16:  717:int playSmithy(struct gameState *state, int currentPlayer, int handPos)
        -:  718:{
        -:  719:
        -:  720:    int i;
        -:  721:
        -:  722://+3 Cards  *** REFACTOR changes i++ to ++i, breaks the intent of the card.
       64:  723:      for (i = 0; i < 3; ++i)
        -:  724:	{
       48:  725:	  drawCard(currentPlayer, state);
        -:  726:	}
        -:  727:      //discard card from hand
       16:  728:      discardCard(handPos, currentPlayer, state, 0);
       16:  729:      return 0;
        -:  730:}
        -:  731:
        -:  732:
        -:  733://-------------------------------
        -:  734:// VILLAGE
        -:  735://-------------------------------
        -:  736:
    #####:  737:int playVillage(struct gameState *state, int currentPlayer, int handPos)
        -:  738:{
        -:  739:      //+1 Card
    #####:  740:      drawCard(currentPlayer, state);
        -:  741:
        -:  742:      //+2 Actions
    #####:  743:      state->numActions = state->numActions + 2;
        -:  744:
        -:  745:      //discard played card from hand
        -:  746:      // discardCard(handPos, currentPlayer, state, 0);
    #####:  747:      return 0;
        -:  748:
        -:  749:}
        -:  750:
        -:  751://---------------------------------
        -:  752:
      625:  753:int getCost(int cardNumber)
        -:  754:{
      625:  755:  switch( cardNumber )
        -:  756:    {
        -:  757:    case curse:
    #####:  758:      return 0;
        -:  759:    case estate:
    #####:  760:      return 2;
        -:  761:    case duchy:
    #####:  762:      return 5;
        -:  763:    case province:
      134:  764:      return 8;
        -:  765:    case copper:
    #####:  766:      return 0;
        -:  767:    case silver:
      244:  768:      return 3;
        -:  769:    case gold:
      189:  770:      return 6;
        -:  771:    case adventurer:
       26:  772:      return 6;
        -:  773:    case council_room:
    #####:  774:      return 5;
        -:  775:    case feast:
    #####:  776:      return 4;
        -:  777:    case gardens:
    #####:  778:      return 4;
        -:  779:    case mine:
    #####:  780:      return 5;
        -:  781:    case remodel:
    #####:  782:      return 4;
        -:  783:    case smithy:
       32:  784:      return 4;
        -:  785:    case village:
    #####:  786:      return 3;
        -:  787:    case baron:
    #####:  788:      return 4;
        -:  789:    case great_hall:
    #####:  790:      return 3;
        -:  791:    case minion:
    #####:  792:      return 5;
        -:  793:    case steward:
    #####:  794:      return 3;
        -:  795:    case tribute:
    #####:  796:      return 5;
        -:  797:    case ambassador:
    #####:  798:      return 3;
        -:  799:    case cutpurse:
    #####:  800:      return 4;
        -:  801:    case embargo:
    #####:  802:      return 2;
        -:  803:    case outpost:
    #####:  804:      return 5;
        -:  805:    case salvager:
    #####:  806:      return 4;
        -:  807:    case sea_hag:
    #####:  808:      return 4;
        -:  809:    case treasure_map:
    #####:  810:      return 4;
        -:  811:    }
        -:  812:
    #####:  813:  return -1;
        -:  814:}
        -:  815:
       61:  816:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  817:{
        -:  818:  int i;
        -:  819:  int j;
        -:  820:  int k;
        -:  821:  int x;
        -:  822:  int index;
       61:  823:  int currentPlayer = whoseTurn(state);
       61:  824:  int nextPlayer = currentPlayer + 1;
        -:  825:
       61:  826:  int tributeRevealedCards[2] = {-1, -1};
        -:  827:  int temphand[MAX_HAND];// moved above the if statement
       61:  828:  int drawntreasure=0;
        -:  829:  int cardDrawn;
       61:  830:  int z = 0;// this is the counter for the temp hand
       61:  831:  if (nextPlayer > (state->numPlayers - 1)){
       45:  832:    nextPlayer = 0;
        -:  833:  }
        -:  834:
        -:  835:
       61:  836:switch(card)
        -:  837:{
        -:  838://------------------------------------------------------------------------------
        -:  839:// Refactored cards/card function calls.
        -:  840:
        -:  841://----------------------------
        -:  842:// ADVENTURER
        -:  843:    case adventurer:
       45:  844:        playAdventurer(state, currentPlayer, cardDrawn, drawntreasure, temphand, z);
       45:  845:        break;
        -:  846://----------------------------
        -:  847:
        -:  848:
        -:  849://--------------------------------
        -:  850:// COUNCIL ROOM
        -:  851:    case council_room:
    #####:  852:        playCouncRoom(state, currentPlayer, handPos);
    #####:  853:        break;
        -:  854://---------------------------------
        -:  855:
        -:  856://---------------------------
        -:  857:// MINION
        -:  858://---------------------------
        -:  859:
        -:  860:    case minion:
    #####:  861:        playMinion(state, choice1, choice2, currentPlayer, handPos);
    #####:  862:        break;
        -:  863://--------------------------------
        -:  864:
        -:  865://-------------------------
        -:  866:// SMITHY
        -:  867://-------------------------
        -:  868:
        -:  869:case smithy:
       16:  870:      playSmithy(state, currentPlayer, handPos);
       16:  871:      break;
        -:  872:
        -:  873://-------------------------
        -:  874:
        -:  875://-------------------------
        -:  876:// VILLAGE
        -:  877://-------------------------
        -:  878:
        -:  879:case village:
    #####:  880:    playVillage(state, currentPlayer, handPos);
    #####:  881:    break;
        -:  882:
        -:  883://-------------------------
        -:  884:    case feast:
        -:  885:      //gain card with cost up to 5
        -:  886:      //Backup hand
    #####:  887:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  888:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  889:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  890:      }
        -:  891:      //Backup hand
        -:  892:
        -:  893:      //Update Coins for Buy
    #####:  894:      updateCoins(currentPlayer, state, 5);
    #####:  895:      x = 1;//Condition to loop on
    #####:  896:      while( x == 1) {//Buy one card
    #####:  897:	if (supplyCount(choice1, state) <= 0){
    #####:  898:	  if (DEBUG)
        -:  899:	    printf("None of that card left, sorry!\n");
        -:  900:
    #####:  901:	  if (DEBUG){
        -:  902:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  903:	  }
        -:  904:	}
    #####:  905:	else if (state->coins < getCost(choice1)){
    #####:  906:	  printf("That card is too expensive!\n");
        -:  907:
    #####:  908:	  if (DEBUG){
        -:  909:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  910:	  }
        -:  911:	}
        -:  912:	else{
        -:  913:
    #####:  914:	  if (DEBUG){
        -:  915:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  916:	  }
        -:  917:
    #####:  918:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  919:	  x = 0;//No more buying cards
        -:  920:
    #####:  921:	  if (DEBUG){
        -:  922:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  923:	  }
        -:  924:
        -:  925:	}
        -:  926:      }
        -:  927:
        -:  928:      //Reset Hand
    #####:  929:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  930:	state->hand[currentPlayer][i] = temphand[i];
    #####:  931:	temphand[i] = -1;
        -:  932:      }
        -:  933:      //Reset Hand
        -:  934:
    #####:  935:      return 0;
        -:  936:
        -:  937:    case gardens:
    #####:  938:      return -1;
        -:  939:
        -:  940:    case mine:
    #####:  941:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  942:
    #####:  943:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  944:	{
    #####:  945:	  return -1;
        -:  946:	}
        -:  947:
    #####:  948:      if (choice2 > treasure_map || choice2 < curse)
        -:  949:	{
    #####:  950:	  return -1;
        -:  951:	}
        -:  952:
    #####:  953:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  954:	{
    #####:  955:	  return -1;
        -:  956:	}
        -:  957:
    #####:  958:      gainCard(choice2, state, 2, currentPlayer);
        -:  959:
        -:  960:      //discard card from hand
    #####:  961:      discardCard(handPos, currentPlayer, state, 0);
        -:  962:
        -:  963:      //discard trashed card
    #####:  964:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  965:	{
    #####:  966:	  if (state->hand[currentPlayer][i] == j)
        -:  967:	    {
    #####:  968:	      discardCard(i, currentPlayer, state, 0);
    #####:  969:	      break;
        -:  970:	    }
        -:  971:	}
        -:  972:
    #####:  973:      return 0;
        -:  974:
        -:  975:    case remodel:
    #####:  976:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  977:
    #####:  978:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  979:	{
    #####:  980:	  return -1;
        -:  981:	}
        -:  982:
    #####:  983:      gainCard(choice2, state, 0, currentPlayer);
        -:  984:
        -:  985:      //discard card from hand
    #####:  986:      discardCard(handPos, currentPlayer, state, 0);
        -:  987:
        -:  988:      //discard trashed card
    #####:  989:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  990:	{
    #####:  991:	  if (state->hand[currentPlayer][i] == j)
        -:  992:	    {
    #####:  993:	      discardCard(i, currentPlayer, state, 0);
    #####:  994:	      break;
        -:  995:	    }
        -:  996:	}
        -:  997:
        -:  998:
    #####:  999:      return 0;
        -: 1000:
        -: 1001: case baron:
    #####: 1002:      state->numBuys++;//Increase buys by 1!
    #####: 1003:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####: 1004:	int p = 0;//Iterator for hand!
    #####: 1005:	int card_not_discarded = 1;//Flag for discard set!
    #####: 1006:	while(card_not_discarded){
    #####: 1007:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####: 1008:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1009:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1010:	    state->discardCount[currentPlayer]++;
    #####: 1011:	    for (;p < state->handCount[currentPlayer]; p++){
    #####: 1012:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1013:	    }
    #####: 1014:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1015:	    state->handCount[currentPlayer]--;
    #####: 1016:	    card_not_discarded = 0;//Exit the loop
        -: 1017:	  }
    #####: 1018:	  else if (p > state->handCount[currentPlayer]){
    #####: 1019:	    if(DEBUG) {
        -: 1020:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1021:	      printf("Must gain an estate if there are any\n");
        -: 1022:	    }
    #####: 1023:	    if (supplyCount(estate, state) > 0){
    #####: 1024:	      gainCard(estate, state, 0, currentPlayer);
    #####: 1025:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1026:	      if (supplyCount(estate, state) == 0){
    #####: 1027:		isGameOver(state);
        -: 1028:	      }
        -: 1029:	    }
    #####: 1030:	    card_not_discarded = 0;//Exit the loop
        -: 1031:	  }
        -: 1032:
        -: 1033:	  else{
    #####: 1034:	    p++;//Next card
        -: 1035:	  }
        -: 1036:	}
        -: 1037:      }
        -: 1038:
        -: 1039:      else{
    #####: 1040:	if (supplyCount(estate, state) > 0){
    #####: 1041:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1042:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1043:	  if (supplyCount(estate, state) == 0){
    #####: 1044:	    isGameOver(state);
        -: 1045:	  }
        -: 1046:	}
        -: 1047:      }
        -: 1048:
        -: 1049:
    #####: 1050:      return 0;
        -: 1051:
        -: 1052:
        -: 1053:
        -: 1054:    case great_hall:
        -: 1055:      //+1 Card
    #####: 1056:      drawCard(currentPlayer, state);
        -: 1057:
        -: 1058:      //+1 Actions
    #####: 1059:      state->numActions++;
        -: 1060:
        -: 1061:      //discard card from hand
    #####: 1062:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1063:      return 0;
        -: 1064:
        -: 1065:    case steward:
    #####: 1066:      if (choice1 == 1)
        -: 1067:	{
        -: 1068:	  //+2 cards
    #####: 1069:	  drawCard(currentPlayer, state);
    #####: 1070:	  drawCard(currentPlayer, state);
        -: 1071:	}
    #####: 1072:      else if (choice1 == 2)
        -: 1073:	{
        -: 1074:	  //+2 coins
    #####: 1075:	  state->coins = state->coins + 2;
        -: 1076:	}
        -: 1077:      else
        -: 1078:	{
        -: 1079:	  //trash 2 cards in hand
    #####: 1080:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1081:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1082:	}
        -: 1083:
        -: 1084:      //discard card from hand
    #####: 1085:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1086:      return 0;
        -: 1087:
        -: 1088:    case tribute:
    #####: 1089:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1090:	if (state->deckCount[nextPlayer] > 0){
    #####: 1091:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1092:	  state->deckCount[nextPlayer]--;
        -: 1093:	}
    #####: 1094:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1095:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1096:	  state->discardCount[nextPlayer]--;
        -: 1097:	}
        -: 1098:	else{
        -: 1099:	  //No Card to Reveal
    #####: 1100:	  if (DEBUG){
        -: 1101:	    printf("No cards to reveal\n");
        -: 1102:	  }
        -: 1103:	}
        -: 1104:      }
        -: 1105:
        -: 1106:      else{
    #####: 1107:	if (state->deckCount[nextPlayer] == 0){
    #####: 1108:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1109:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1110:	    state->deckCount[nextPlayer]++;
    #####: 1111:	    state->discard[nextPlayer][i] = -1;
    #####: 1112:	    state->discardCount[nextPlayer]--;
        -: 1113:	  }
        -: 1114:
    #####: 1115:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1116:	}
    #####: 1117:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1118:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1119:	state->deckCount[nextPlayer]--;
    #####: 1120:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1121:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1122:	state->deckCount[nextPlayer]--;
        -: 1123:      }
        -: 1124:
    #####: 1125:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####: 1126:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1127:	state->playedCardCount++;
    #####: 1128:	tributeRevealedCards[1] = -1;
        -: 1129:      }
        -: 1130:
    #####: 1131:      for (i = 0; i <= 2; i ++){
    #####: 1132:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1133:	  state->coins += 2;
        -: 1134:	}
        -: 1135:
    #####: 1136:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1137:	  drawCard(currentPlayer, state);
    #####: 1138:	  drawCard(currentPlayer, state);
        -: 1139:	}
        -: 1140:	else{//Action Card
    #####: 1141:	  state->numActions = state->numActions + 2;
        -: 1142:	}
        -: 1143:      }
        -: 1144:
    #####: 1145:      return 0;
        -: 1146:
        -: 1147:    case ambassador:
    #####: 1148:      j = 0;		//used to check if player has enough cards to discard
        -: 1149:
    #####: 1150:      if (choice2 > 2 || choice2 < 0)
        -: 1151:	{
    #####: 1152:	  return -1;
        -: 1153:	}
        -: 1154:
    #####: 1155:      if (choice1 == handPos)
        -: 1156:	{
    #####: 1157:	  return -1;
        -: 1158:	}
        -: 1159:
    #####: 1160:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1161:	{
    #####: 1162:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1163:	    {
    #####: 1164:	      j++;
        -: 1165:	    }
        -: 1166:	}
    #####: 1167:      if (j < choice2)
        -: 1168:	{
    #####: 1169:	  return -1;
        -: 1170:	}
        -: 1171:
    #####: 1172:      if (DEBUG)
        -: 1173:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1174:
        -: 1175:      //increase supply count for choosen card by amount being discarded
    #####: 1176:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1177:
        -: 1178:      //each other player gains a copy of revealed card
    #####: 1179:      for (i = 0; i < state->numPlayers; i++)
        -: 1180:	{
    #####: 1181:	  if (i != currentPlayer)
        -: 1182:	    {
    #####: 1183:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1184:	    }
        -: 1185:	}
        -: 1186:
        -: 1187:      //discard played card from hand
    #####: 1188:      discardCard(handPos, currentPlayer, state, 0);
        -: 1189:
        -: 1190:      //trash copies of cards returned to supply
    #####: 1191:      for (j = 0; j < choice2; j++)
        -: 1192:	{
    #####: 1193:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1194:	    {
    #####: 1195:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1196:		{
    #####: 1197:		  discardCard(i, currentPlayer, state, 1);
    #####: 1198:		  break;
        -: 1199:		}
        -: 1200:	    }
        -: 1201:	}
        -: 1202:
    #####: 1203:      return 0;
        -: 1204:
        -: 1205:    case cutpurse:
        -: 1206:
    #####: 1207:      updateCoins(currentPlayer, state, 2);
    #####: 1208:      for (i = 0; i < state->numPlayers; i++)
        -: 1209:	{
    #####: 1210:	  if (i != currentPlayer)
        -: 1211:	    {
    #####: 1212:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1213:		{
    #####: 1214:		  if (state->hand[i][j] == copper)
        -: 1215:		    {
    #####: 1216:		      discardCard(j, i, state, 0);
    #####: 1217:		      break;
        -: 1218:		    }
    #####: 1219:		  if (j == state->handCount[i])
        -: 1220:		    {
    #####: 1221:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1222:			{
    #####: 1223:			  if (DEBUG)
        -: 1224:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1225:			}
    #####: 1226:		      break;
        -: 1227:		    }
        -: 1228:		}
        -: 1229:
        -: 1230:	    }
        -: 1231:
        -: 1232:	}
        -: 1233:
        -: 1234:      //discard played card from hand
    #####: 1235:      discardCard(handPos, currentPlayer, state, 0);
        -: 1236:
    #####: 1237:      return 0;
        -: 1238:
        -: 1239:
        -: 1240:    case embargo:
        -: 1241:      //+2 Coins
    #####: 1242:      state->coins = state->coins + 2;
        -: 1243:
        -: 1244:      //see if selected pile is in play
    #####: 1245:      if ( state->supplyCount[choice1] == -1 )
        -: 1246:	{
    #####: 1247:	  return -1;
        -: 1248:	}
        -: 1249:
        -: 1250:      //add embargo token to selected supply pile
    #####: 1251:      state->embargoTokens[choice1]++;
        -: 1252:
        -: 1253:      //trash card
    #####: 1254:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1255:      return 0;
        -: 1256:
        -: 1257:    case outpost:
        -: 1258:      //set outpost flag
    #####: 1259:      state->outpostPlayed++;
        -: 1260:
        -: 1261:      //discard card
    #####: 1262:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1263:      return 0;
        -: 1264:
        -: 1265:    case salvager:
        -: 1266:      //+1 buy
    #####: 1267:      state->numBuys++;
        -: 1268:
    #####: 1269:      if (choice1)
        -: 1270:	{
        -: 1271:	  //gain coins equal to trashed card
    #####: 1272:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1273:	  //trash card
    #####: 1274:	  discardCard(choice1, currentPlayer, state, 1);
        -: 1275:	}
        -: 1276:
        -: 1277:      //discard card
    #####: 1278:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1279:      return 0;
        -: 1280:
        -: 1281:    case sea_hag:
    #####: 1282:      for (i = 0; i < state->numPlayers; i++){
    #####: 1283:	if (i != currentPlayer){
    #####: 1284:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1285:	  state->discardCount[i]++;
    #####: 1286:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1287:	}
        -: 1288:      }
    #####: 1289:      return 0;
        -: 1290:
        -: 1291:    case treasure_map:
        -: 1292:      //search hand for another treasure_map
    #####: 1293:      index = -1;
    #####: 1294:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1295:	{
    #####: 1296:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1297:	    {
    #####: 1298:	      index = i;
    #####: 1299:	      break;
        -: 1300:	    }
        -: 1301:	}
    #####: 1302:      if (index > -1)
        -: 1303:	{
        -: 1304:	  //trash both treasure cards
    #####: 1305:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1306:	  discardCard(index, currentPlayer, state, 1);
        -: 1307:
        -: 1308:	  //gain 4 Gold cards
    #####: 1309:	  for (i = 0; i < 4; i++)
        -: 1310:	    {
    #####: 1311:	      gainCard(gold, state, 1, currentPlayer);
        -: 1312:	    }
        -: 1313:
        -: 1314:	  //return success
    #####: 1315:	  return 1;
        -: 1316:	}
        -: 1317:
        -: 1318:      //no second treasure_map found in hand
    #####: 1319:      return -1;
        -: 1320:    }
        -: 1321:
       61: 1322:  return -1;
        -: 1323:}
        -: 1324:
       16: 1325:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1326:{
        -: 1327:
        -: 1328:  //if card is not trashed, added to Played pile
       16: 1329:  if (trashFlag < 1)
        -: 1330:    {
        -: 1331:      //add card to played pile
       16: 1332:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
       16: 1333:      state->playedCardCount++;
        -: 1334:    }
        -: 1335:
        -: 1336:  //set played card to -1
       16: 1337:  state->hand[currentPlayer][handPos] = -1;
        -: 1338:
        -: 1339:  //remove card from player's hand
       16: 1340:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1341:    {
        -: 1342:      //reduce number of cards in hand
    #####: 1343:      state->handCount[currentPlayer]--;
        -: 1344:    }
       16: 1345:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1346:    {
        -: 1347:      //reduce number of cards in hand
    #####: 1348:      state->handCount[currentPlayer]--;
        -: 1349:    }
        -: 1350:  else
        -: 1351:    {
        -: 1352:      //replace discarded card with last card in hand
       16: 1353:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1354:      //set last card to -1
       16: 1355:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1356:      //reduce number of cards in hand
       16: 1357:      state->handCount[currentPlayer]--;
        -: 1358:    }
        -: 1359:
       16: 1360:  return 0;
        -: 1361:}
        -: 1362:
      295: 1363:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1364:{
        -: 1365:  //Note: supplyPos is enum of choosen card
        -: 1366:
        -: 1367:  //check if supply pile is empty (0) or card is not used in game (-1)
      295: 1368:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1369:    {
    #####: 1370:      return -1;
        -: 1371:    }
        -: 1372:
        -: 1373:  //added card for [whoseTurn] current player:
        -: 1374:  // toFlag = 0 : add to discard
        -: 1375:  // toFlag = 1 : add to deck
        -: 1376:  // toFlag = 2 : add to hand
        -: 1377:
      295: 1378:  if (toFlag == 1)
        -: 1379:    {
    #####: 1380:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1381:      state->deckCount[player]++;
        -: 1382:    }
      295: 1383:  else if (toFlag == 2)
        -: 1384:    {
    #####: 1385:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1386:      state->handCount[player]++;
        -: 1387:    }
        -: 1388:  else
        -: 1389:    {
      295: 1390:      state->discard[player][ state->discardCount[player] ] = supplyPos;
      295: 1391:      state->discardCount[player]++;
        -: 1392:    }
        -: 1393:
        -: 1394:  //decrease number in supply pile
      295: 1395:  state->supplyCount[supplyPos]--;
        -: 1396:
      295: 1397:  return 0;
        -: 1398:}
        -: 1399:
      349: 1400:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1401:{
        -: 1402:  int i;
        -: 1403:
        -: 1404:  //reset coin count
      349: 1405:  state->coins = 0;
        -: 1406:
        -: 1407:  //add coins for each Treasure card in player's hand
     2094: 1408:  for (i = 0; i < state->handCount[player]; i++)
        -: 1409:    {
     1745: 1410:      if (state->hand[player][i] == copper)
        -: 1411:	{
      761: 1412:	  state->coins += 1;
        -: 1413:	}
      984: 1414:      else if (state->hand[player][i] == silver)
        -: 1415:	{
      349: 1416:	  state->coins += 2;
        -: 1417:	}
      635: 1418:      else if (state->hand[player][i] == gold)
        -: 1419:	{
      151: 1420:	  state->coins += 3;
        -: 1421:	}
        -: 1422:    }
        -: 1423:
        -: 1424:  //add bonus
      349: 1425:  state->coins += bonus;
        -: 1426:
      349: 1427:  return 0;
        -: 1428:}
        -: 1429:
        -: 1430:
        -: 1431://end of dominion.c
        -: 1432:
