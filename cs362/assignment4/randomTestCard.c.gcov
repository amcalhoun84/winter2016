        -:    0:Source:randomTestCard.c
        -:    0:Graph:randomTestCard.gcno
        -:    0:Data:randomTestCard.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:** Name: Andrew Michael Calhoun
        -:    3:** Date: 2/5/2014 
        -:    4:** CS 362 - Assignment 4
        -:    5:** randomtestcard.c
        -:    6:**
        -:    7:** -- ALL FAIL! This is on purpose, as the discard function is not working properly in the village card.
        -:    8:*/
        -:    9:
        -:   10:#include "dominion.h"
        -:   11:#include "dominion_helpers.h"
        -:   12:#include "rngs.h"
        -:   13:#include <string.h>
        -:   14:#include <stdio.h>
        -:   15:#include <math.h>
        -:   16:#include <stdlib.h>
        -:   17:#include <time.h>
        -:   18:
        -:   19:#define TESTCARD "village"
        -:   20:
        -:   21:/*
        -:   22:int playVillage(struct gameState *state, int currentPlayer, int handPos)
        -:   23:{
        -:   24:      //+1 Card
        -:   25:      drawCard(currentPlayer, state);
        -:   26:
        -:   27:      //+2 Actions
        -:   28:      state->numActions = state->numActions + 2;
        -:   29:
        -:   30:      //discard played card from hand
        -:   31:      // discardCard(handPos, currentPlayer, state, 0);
        -:   32:      return 0;
        -:   33:}
        -:   34:*/
        -:   35:
function main called 1 returned 100% blocks executed 88%
        1:   36:int main()
        -:   37:{
        1:   38:	srand(time(NULL));
call    0 returned 100%
call    1 returned 100%
        -:   39:	int i;
        1:   40:	int numPlayers = 2, thisPlayer = 0, handPos = 0;
        1:   41:	int seed = rand() % 65535;
call    0 returned 100%
        1:   42:	int k[10] = { adventurer, smithy, village, great_hall, council_room, salvager, sea_hag, gardens, remodel, ambassador };
        1:   43:	int totalSuccesses, totalFailures, numTests = 1000;
        -:   44:
        -:   45:	int successBool; // Assume all tests pass unless otherwise specified.
        -:   46:
        1:   47:	totalSuccesses = numTests;
        -:   48:
        -:   49:	struct gameState state, testState;
        -:   50:
        1:   51:	initializeGame(numPlayers, k, seed, &state);
call    0 returned 100%
        -:   52:
        1:   53:	totalFailures = 0;
        -:   54:
        1:   55:	printf("GENERATING CARD TEST FOR %s\n", TESTCARD);
call    0 returned 100%
        -:   56:
     1001:   57:	for(i = 0; i < numTests; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   58:	{
     1000:   59:		successBool = 1;
     1000:   60:		printf("\nITERATION %d\n", i+1);
call    0 returned 100%
        -:   61:
        -:   62:
     1000:   63:		memcpy(&testState, &state, sizeof(struct gameState));
     1000:   64:		state.hand[thisPlayer][0] = rand() % 27;
call    0 returned 100%
     1000:   65:		state.hand[thisPlayer][1] = rand() % 27;
call    0 returned 100%
     1000:   66:		state.hand[thisPlayer][2] = rand() % 27;
call    0 returned 100%
     1000:   67:		state.hand[thisPlayer][3] = rand() % 27;
call    0 returned 100%
     1000:   68:		state.hand[thisPlayer][4] = rand() % 27;
call    0 returned 100%
        -:   69:
     1000:   70:		state.hand[thisPlayer+1][0] = rand() % 27;
call    0 returned 100%
     1000:   71:		state.hand[thisPlayer+1][1] = rand() % 27;
call    0 returned 100%
     1000:   72:		state.hand[thisPlayer+1][2] = rand() % 27;
call    0 returned 100%
     1000:   73:		state.hand[thisPlayer+1][3] = rand() % 27;
call    0 returned 100%
     1000:   74:		state.hand[thisPlayer+1][4] = rand() % 27;
call    0 returned 100%
        -:   75:
     1000:   76:		state.deck[thisPlayer][0] = rand() % 27;
call    0 returned 100%
     1000:   77:		state.deck[thisPlayer][1] = rand() % 27;
call    0 returned 100%
     1000:   78:		state.deck[thisPlayer][2] = rand() % 27;
call    0 returned 100%
     1000:   79:		state.deck[thisPlayer][3] = rand() % 27;
call    0 returned 100%
     1000:   80:		state.deck[thisPlayer][4] = rand() % 27;
call    0 returned 100%
        -:   81:
     1000:   82:		state.deck[thisPlayer+1][0] = rand() % 27;
call    0 returned 100%
     1000:   83:		state.deck[thisPlayer+1][1] = rand() % 27;
call    0 returned 100%
     1000:   84:		state.deck[thisPlayer+1][2] = rand() % 27;
call    0 returned 100%
     1000:   85:		state.deck[thisPlayer+1][3] = rand() % 27;
call    0 returned 100%
     1000:   86:		state.deck[thisPlayer+1][4] = rand() % 27;
call    0 returned 100%
        -:   87:
     1000:   88:		memcpy(&testState, &state, sizeof(struct gameState));
        -:   89:	
        -:   90:		//testState.hand[thisPlayer][0] = rand() % 27;
        -:   91:		//testState.hand[thisPlayer][1] = rand() % 27;
        -:   92:		//testState.hand[thisPlayer][2] = rand() % 27;
        -:   93:		//testState.hand[thisPlayer][3] = rand() % 27;
        -:   94:		//testState.hand[thisPlayer][4] = rand() % 27;
        -:   95:
        -:   96:
        -:   97:
        -:   98:		// Make sure we have all of the victory cards are in order.
        -:   99:/*		if(testState.supplyCount[estate] != 8 || testState.supplyCount[duchy] != 8 || testState.supplyCount[province] != 8)
        -:  100:		{
        -:  101:			printf("\nFailed Test: Victory card supplies are incorrect.\n");
        -:  102:			successBool = 0;
        -:  103:		}		
        -:  104:
        -:  105:		if(testState.supplyCount[copper] != 46 || testState.supplyCount[silver] != 40 || testState.supplyCount[gold] != 30)
        -:  106:		{
        -:  107:			printf("\nFailed Test: Treasure Card supplies are not correct\n");
        -:  108:			successBool = 0;
        -:  109:		}	
        -:  110:		if(testState.supplyCount[copper] + testState.supplyCount[silver] + testState.supplyCount[gold] != 116);
        -:  111:		{
        -:  112:			printf("\nFailed Test: Treasure Card Totals Do Not Equal 116\n");
        -:  113:			successBool = 0;
        -:  114:		}
        -:  115:*/
     1000:  116:		playVillage(&testState, thisPlayer, handPos);
call    0 returned 100%
        -:  117:
     1000:  118:		if(testState.deckCount[thisPlayer] != state.deckCount[thisPlayer] - 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  119:		{
    #####:  120:			printf("\nFailed Test: Player did not pick up extra card properly.\n");
call    0 never executed
    #####:  121:			printf("Deck Count: %d, Pre-Deck Count: %d\n", testState.deckCount[thisPlayer], state.deckCount[thisPlayer] - 1);
call    0 never executed
    #####:  122:			totalFailures++;
    #####:  123:			successBool = 0;
        -:  124:		}
        -:  125:
     1000:  126:		if(testState.numActions != state.numActions + 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  127:		{
    #####:  128:			printf("\nFailed Test: Number of actions did not increase properly for Player 1.\n");
call    0 never executed
    #####:  129:			totalFailures++;
    #####:  130:			successBool = 0;
        -:  131:		}
        -:  132:
     1000:  133:		if(testState.discardCount[thisPlayer] != state.discardCount[thisPlayer] + 1) // should fail
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  134:		{
     1000:  135:			printf("\nFailed Test: Number of cards discarded did not increase properly for Player 1.\n");
call    0 returned 100%
     1000:  136:			printf("Deck Count: %d, Pre-Deck Count: %d\n", testState.discardCount[thisPlayer], state.discardCount[thisPlayer] + 1);
call    0 returned 100%
     1000:  137:			totalFailures++;
     1000:  138:			successBool = 0;
        -:  139:		}
        -:  140:
     1000:  141:		endTurn(&testState);
call    0 returned 100%
        -:  142:
        -:  143:		// Player 2 
        -:  144:
     1000:  145:		playVillage(&testState, thisPlayer, handPos);
call    0 returned 100%
        -:  146:
     1000:  147:		if(testState.deckCount[thisPlayer] != state.deckCount[thisPlayer] - 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  148:		{
     1000:  149:			printf("\nFailed Test: Player 2 did not pick up extra card properly.\n");
call    0 returned 100%
     1000:  150:			printf("Deck Count: %d, Pre-Deck Count: %d\n", testState.deckCount[thisPlayer], state.deckCount[thisPlayer] - 1);
call    0 returned 100%
     1000:  151:			totalFailures++;
     1000:  152:			successBool = 0;
        -:  153:		}
        -:  154:
     1000:  155:		if(testState.numActions != state.numActions + 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  156:		{
    #####:  157:			printf("\nFailed Test: Number of actions did not increase properly for Player 2.\n");
call    0 never executed
    #####:  158:			totalFailures++;
    #####:  159:			successBool = 0;
        -:  160:		}
        -:  161:
     1000:  162:		if(testState.discardCount[thisPlayer] != state.discardCount[thisPlayer] - 6)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  163:		{
     1000:  164:			printf("\nFailed Test: Number of cards discarded did not increase properly for Player 2.\n");
call    0 returned 100%
     1000:  165:			printf("Deck Count: %d, Pre-Deck Count: %d\n", testState.discardCount[thisPlayer], state.discardCount[thisPlayer] + 1);
call    0 returned 100%
     1000:  166:			totalFailures++;
     1000:  167:			successBool = 0;
        -:  168:
        -:  169:		}
        -:  170:
        -:  171:
        -:  172:	}
        -:  173:
        1:  174:	printf("Testing complete for %s.\n", TESTCARD);
call    0 returned 100%
        1:  175:	printf("Total Tests: %d\n", numTests);
call    0 returned 100%
        1:  176:	printf("Total Successful: %d\n", (numTests * 6) - totalFailures);
call    0 returned 100%
        1:  177:	printf("Total Unsuccessful: %d\n", totalFailures);
call    0 returned 100%
        -:  178:
        1:  179:	return 0;
        -:  180:
        -:  181:
        -:  182:}