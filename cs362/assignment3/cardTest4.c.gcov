        -:    0:Source:cardTest4.c
        -:    0:Graph:cardTest4.gcno
        -:    0:Data:cardTest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// Andrew M. Calhoun
        -:    2:// CARD TEST - ASSIGNMENT 3
        -:    3:// CardTest4.c
        -:    4:// Unit Test for card function - MINION.
        -:    5:
        -:    6:#include "dominion.h"
        -:    7:#include "dominion_helpers.h"
        -:    8:#include "rngs.h"
        -:    9:#include <string.h>
        -:   10:#include <stdio.h>
        -:   11:#include <assert.h>
        -:   12:#include <time.h>
        -:   13:#include <stdlib.h>
        -:   14:#include <math.h>
        -:   15:#include <stdlib.h>
        -:   16:#include <string.h>
        -:   17:
        -:   18:#define DEBUG 0
        -:   19:#define NOISY_TEST 1
        -:   20:#define TESTCARD "minion"
        -:   21:
        -:   22:/*-------------------------------
        -:   23:// PLAY MINION
        -:   24://-------------------------------
        -:   25:
        -:   26:int playMinion(struct gameState *state, int choice1, int choice2, int currentPlayer, int handPos)
        -:   27:{
        -:   28:
        -:   29:    int i, j;
        -:   30:
        -:   31:
        -:   32:      //+1 action
        -:   33:      state->numActions--;
        -:   34:
        -:   35:      //discard card from hand
        -:   36:      discardCard(handPos, currentPlayer, state, 0);
        -:   37:
        -:   38:      if (choice1)		//+2 coins *** REFACTORED: -2 coins.
        -:   39:	{
        -:   40:	  state->coins = state->coins - 2;
        -:   41:	}
        -:   42:
        -:   43:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:   44:	{
        -:   45:
        -:   46://	  //discard hand ** COMMENTED OUT FOR REFACTORING
        -:   47://	  while(numHandCards(state) > 0)
        -:   48://	    {
        -:   49://	      discardCard(handPos, currentPlayer, state, 0);
        -:   50://	    }
        -:   51:
        -:   52:	  //draw 4 *** REFACTORED TO DRAW 3
        -:   53:	  for (i = 0; i < 3; i++)
        -:   54:	    {
        -:   55:	      drawCard(currentPlayer, state);
        -:   56:	    }
        -:   57:
        -:   58:	  //other players discard hand and redraw if hand size > 4 *** REFACTOR: They not only get to keep their cards, they get 3 MORE!
        -:   59:	  for (i = 0; i < state->numPlayers; i++)
        -:   60:	    {
        -:   61:	      if (i != currentPlayer)
        -:   62:		{
        -:   63:		  if ( state->handCount[i] > 4 )
        -:   64:		    {
        -:   65:		    //  //discard hand
        -:   66:		    //  while( state->handCount[i] > 0 )
        -:   67:			// {
        -:   68:			//  discardCard(handPos, i, state, 0);
        -:   69:			// }
        -:   70:
        -:   71:		      //draw 4 ** REFACTOR: 3
        -:   72:		      for (j = 0; j < 3; j++)
        -:   73:			{
        -:   74:			  drawCard(i, state);
        -:   75:			}
        -:   76:		    }
        -:   77:		}
        -:   78:	    }
        -:   79:
        -:   80:	}
        -:   81:      return 0;
        -:   82:
        -:   83:}
        -:   84:
        -:   85:*/
        -:   86:
function main called 1 returned 100% blocks executed 77%
        1:   87:int main()
        -:   88:{
        -:   89:    // The minion card has been changed drastically, thus it should fail on most accounts -- tests will find failure points and point them out.
        -:   90:
        1:   91:   int i, thisPlayer, handPos = 0, seed = 65535, numPlayer = 2, kCardCount, choice1, choice2, allTestsPassed = 1;
        1:   92:	int k[10] = {adventurer, smithy, great_hall, council_room, salvager, gardens, mine, remodel, village, ambassador };
        -:   93:	struct gameState state, testState;
        -:   94:
        -:   95:
        -:   96:   // memset(&state, 0, sizeof(struct gameState)); // Ensure we have a clean slate.
        1:   97:    initializeGame(numPlayer, k, seed, &testState);
call    0 returned 100%
        -:   98:
        1:   99:    memcpy(&state, &testState, sizeof(struct gameState));
        -:  100:
        1:  101:    testState.coins = 10;
        1:  102:    state.coins = 10;
        1:  103:    testState.numActions = 1;
        -:  104:
        1:  105:    thisPlayer = 0;
        -:  106:    // playMinion(&testState, 0, 0, thisPlayer, 0);
        -:  107:
        -:  108:    // assert(state.supplyCount[duchy] == 8);  // Making sure the supplies are proper, if not,
        -:  109:                                            // please reload original or refactored code
        -:  110://                                            // that does not adjust values...
        -:  111://
        -:  112://    printf("TEST #1: Checking card supplies...\n");
        -:  113://    for(i = 0; i < 26; i++)
        -:  114://    {
        -:  115://        kCardCount = testState.supplyCount[i];
        -:  116://        printf("Card: %d\n", testState.supplyCount[i]);
        -:  117://        assert(testState.supplyCount[i] == kCardCount);
        -:  118://
        -:  119://    }
        -:  120://
        -:  121://    printf("All kingdom and victory cards check out.\n");
        -:  122:
        1:  123:    printf("TEST #1: Minion Card - choice1 = 1, choice 2 = 0\n");
call    0 returned 100%
        1:  124:    choice1 = 1;
        1:  125:    choice2 = 0;
        -:  126:
        1:  127:    playMinion(&testState, choice1, choice2, thisPlayer, handPos);
call    0 returned 100%
        -:  128:
        1:  129:    printf("Checking to see if action was added...");
call    0 returned 100%
        1:  130:    if(testState.numActions == state.numActions + 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  131:    {
    #####:  132:        printf("TEST #1: Action Test passed!\n\n");
call    0 never executed
        -:  133:    }
        -:  134:    else
        -:  135:    {
        1:  136:        printf("TEST #1: Action Test failed!\n");
call    0 returned 100%
        1:  137:        printf("Expected: %d\n", state.numActions + 1);
call    0 returned 100%
        1:  138:        printf("Result: %d\n\n", testState.numActions);
call    0 returned 100%
        1:  139:        allTestsPassed = 0;
        -:  140:       // assert(testState.numActions == state.numActions + 1); // This will break.
        -:  141:    }
        -:  142:
        1:  143:    printf("Checking to see if 2 coins were added...\n");
call    0 returned 100%
        1:  144:    if(testState.coins == state.coins + 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  145:    {
    #####:  146:        printf("TEST #1: Coin Test passed!\n");
call    0 never executed
        -:  147:    }
        -:  148:    else
        -:  149:    {
        1:  150:        printf("TEST #1: Coin Test failed!\n That dirty minion stole or forgot to give us coins!\n");
call    0 returned 100%
        1:  151:        printf("Expected: %d\n", state.coins + 2);
call    0 returned 100%
        1:  152:        printf("Result: %d\n\n", testState.coins);
call    0 returned 100%
        1:  153:        allTestsPassed = 0;
        -:  154:    }
        -:  155:
        1:  156:    printf("Discard Count: %d\n", testState.discardCount[thisPlayer]);
call    0 returned 100%
        1:  157:    printf("Discards: %d\n", testState.discard[thisPlayer][i]);
call    0 returned 100%
        -:  158:
        1:  159:    if(testState.discardCount[thisPlayer] != state.discardCount[thisPlayer])
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  160:    {
    #####:  161:        printf("TEST #1: Discard Test Failed.\n");
call    0 never executed
    #####:  162:        allTestsPassed = 0;
        -:  163:    }
        -:  164:    else
        -:  165:    {
        1:  166:        printf("TEST #1: Discard Test Passed.\n");
call    0 returned 100%
        -:  167:    }
        -:  168:
        -:  169:
        1:  170:    printf("TEST #1: Previous Hand Count: %d\n", state.handCount[thisPlayer]);
call    0 returned 100%
        1:  171:    printf("TEST #1: Current Hand Count: %d\n", testState.handCount[thisPlayer]);
call    0 returned 100%
        -:  172:
        1:  173:    if(state.handCount[thisPlayer] == testState.handCount[thisPlayer] + 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  174:    {
        1:  175:        printf("TEST #1: Hand Count Test passed.\n\n");
call    0 returned 100%
        -:  176:    }
        -:  177:    else
        -:  178:    {
    #####:  179:        printf("TEST #1: Hand Count Test failed.\n\n");
call    0 never executed
    #####:  180:        allTestsPassed = 0;
        -:  181:    }
        -:  182:
        1:  183:    printf("Checking to see if other players drew cards. (Should Not if Choice 1 was Picked)\n");
call    0 returned 100%
        -:  184:
        2:  185:    for(i=1; i<numPlayer; i++)
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        -:  186:    {
        1:  187:        printf("Number of Cards in Hand for Player %d: %d\n", (i+1), testState.handCount[i]);
call    0 returned 100%
        1:  188:        if(testState.handCount[i] > state.handCount[i])
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  189:        {
    #####:  190:            printf("TEST #1: Player Draw Test failed.\n\n");
call    0 never executed
    #####:  191:            allTestsPassed = 0;
        -:  192:        }
        -:  193:        else
        -:  194:        {
        1:  195:            printf("TEST #1: Player Draw Test passed.\n\n");
call    0 returned 100%
        -:  196:        }
        -:  197:    }
        -:  198:
        1:  199:    printf("Resetting values...\n\n");
call    0 returned 100%
        -:  200:
        1:  201:    memcpy(&testState, &state, sizeof(struct gameState));
        -:  202:
        1:  203:    testState.coins = state.coins = 10;
        1:  204:    testState.numActions = state.numActions = 1;
        1:  205:    choice1 = 0;
        1:  206:    choice2 = 1;
        -:  207:
        1:  208:    printf("MINION TEST #2: Checking Choice 2...\n");
call    0 returned 100%
        1:  209:    playMinion(&testState, choice1, choice2, thisPlayer, handPos);
call    0 returned 100%
        -:  210:
        1:  211:    printf("Checking to see if action was added...\n");
call    0 returned 100%
        -:  212:
        1:  213:    if(testState.numActions == state.numActions + 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  214:    {
    #####:  215:        printf("TEST #2: Action Test Passed!\n\n");
call    0 never executed
        -:  216:    }
        -:  217:    else
        -:  218:    {
        1:  219:        printf("TEST #2: Test failed!\n");
call    0 returned 100%
        1:  220:        printf("Expected: %d\n", state.numActions + 1);
call    0 returned 100%
        1:  221:        printf("Result: %d\n\n", testState.numActions);
call    0 returned 100%
        1:  222:        allTestsPassed = 0;
        -:  223:       // assert(testState.numActions == state.numActions + 1); // This will break.
        -:  224:    }
        -:  225:
        -:  226:    // endTurn(&testState);
        -:  227:
        1:  228:    printf("Testing to see if 2 coins were added...\n -- They should not be if choice2 = true\n");
call    0 returned 100%
        -:  229:
        1:  230:    if(state.coins == testState.coins)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  231:    {
        1:  232:        printf("TEST #2: Coin Test passed!\n\n");
call    0 returned 100%
        -:  233:    }
        -:  234:    else
        -:  235:    {
    #####:  236:        printf("TEST #2: Test failed!\n");
call    0 never executed
    #####:  237:        printf("Expected: %d\n", state.coins + 2);
call    0 never executed
    #####:  238:        printf("Result: %d\n\n", testState.coins);
call    0 never executed
    #####:  239:        allTestsPassed = 0;
        -:  240:    }
        -:  241:
        1:  242:    printf("TEST #2: Checking discard. Should be greater than 0.\n");
call    0 returned 100%
        1:  243:    if(testState.discardCount[thisPlayer] > state.discardCount[thisPlayer])
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  244:    {
    #####:  245:        printf("TEST #2: Discard Test passed.\n\n");
call    0 never executed
        -:  246:    }
        -:  247:    else
        -:  248:    {
        1:  249:        printf("TEST #2: Test failed.\n\n");
call    0 returned 100%
        1:  250:        allTestsPassed = 0;
        -:  251:    }
        -:  252:
        1:  253:    printf("TEST #2: Checking to see that 4 cards were drawn for player 1\n\n");
call    0 returned 100%
        1:  254:    if(testState.handCount[thisPlayer] == state.handCount[thisPlayer] + 4)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  255:    {
    #####:  256:        printf("TEST #2: Draw Test passed!\n\n");
call    0 never executed
        -:  257:    }
        -:  258:    else
        -:  259:    {
        1:  260:        printf("TEST #2: Draw Test failed!\n");
call    0 returned 100%
        1:  261:        printf("Expected: %d\n", state.handCount[thisPlayer] + 4);
call    0 returned 100%
        1:  262:        printf("Result: %d\n\n", testState.handCount[thisPlayer]);
call    0 returned 100%
        1:  263:        allTestsPassed = 0;
        -:  264:    }
        -:  265:
        1:  266:    printf("TEST #2: Checking Hand Counts for other Players.\n");
call    0 returned 100%
        2:  267:    for(i = 1; i < numPlayer; i++)
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        -:  268:    {
        1:  269:        printf("Player %d: Hand Count: %d\n", (i+1), testState.handCount[i]);
call    0 returned 100%
        1:  270:        if(testState.handCount[i] > 4)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  271:        {
    #####:  272:            printf("TEST #2: Other Player Hand Count Test failed!\n");
call    0 never executed
    #####:  273:            printf("Expected: 4\n");
call    0 never executed
    #####:  274:            printf("Result %d\n\n", testState.handCount[1]);
call    0 never executed
        -:  275:        }
        -:  276:        else
        -:  277:        {
        1:  278:            printf("TEST #2: Other Player Hand Count Test Passed.\n\n");
call    0 returned 100%
        1:  279:            printf("Expected: 4\n");
call    0 returned 100%
        1:  280:            printf("Result: %d\n", testState.handCount[1]);
call    0 returned 100%
        -:  281:
        -:  282:        }
        -:  283:    }
        -:  284:
        -:  285:    // refactored bug should increase number of cards to 6/7, but it does not.
        -:  286:
        -:  287:
        1:  288:    if(allTestsPassed)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  289:    {
    #####:  290:        printf("All tests passed. Function works perfectly!\n");
call    0 never executed
        -:  291:    }
        -:  292:    else
        -:  293:    {
        1:  294:        printf("One or more tests failed! Please review results and revise code.\n");
call    0 returned 100%
        -:  295:    }
        -:  296:
        1:  297:	return 0;
        -:  298:}
