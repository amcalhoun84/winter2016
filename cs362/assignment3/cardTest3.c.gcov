        -:    0:Source:cardTest3.c
        -:    0:Graph:cardTest3.gcno
        -:    0:Data:cardTest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// Andrew M. Calhoun
        -:    2:// CARD TEST - ASSIGNMENT 3
        -:    3:// cardTest3.c
        -:    4:// Unit Test for card function - village.
        -:    5:
        -:    6:#include "dominion.h"
        -:    7:#include "dominion_helpers.h"
        -:    8:#include "rngs.h"
        -:    9:#include <string.h>
        -:   10:#include <stdio.h>
        -:   11:#include <assert.h>
        -:   12:#include <time.h>
        -:   13:#include <stdlib.h>
        -:   14:#include <math.h>
        -:   15:#include <stdlib.h>
        -:   16:
        -:   17:#define DEBUG 0
        -:   18:#define NOISY_TEST 1
        -:   19:#define TESTCARD "village"
        -:   20:
        -:   21:/*
        -:   22:int playVillage(struct gameState *state, int currentPlayer, int handPos)
        -:   23:{
        -:   24:      //+1 Card
        -:   25:      drawCard(currentPlayer, state);
        -:   26:
        -:   27:      //+2 Actions
        -:   28:      state->numActions = state->numActions + 2;
        -:   29:
        -:   30:      //discard played card from hand
        -:   31:      // discardCard(handPos, currentPlayer, state, 0);
        -:   32:      return 0;
        -:   33:}
        -:   34:*/
        -:   35:
function main called 1 returned 100% blocks executed 63%
        1:   36:int main()
        -:   37:{
        1:   38:	int i, thisPlayer, seed = 65535, numPlayer = 2, kCardCount, allTestsPassed = 1;
        1:   39:	int k[10] = {adventurer, smithy, great_hall, council_room, salvager, gardens, mine, remodel, village, ambassador };
        -:   40:	struct gameState state, testState;
        -:   41:
        -:   42:
        -:   43:   // memset(&state, 0, sizeof(struct gameState)); // Ensure we have a clean slate.
        1:   44:    initializeGame(numPlayer, k, seed, &testState);
call    0 returned 100%
        -:   45:
        1:   46:    memcpy(&state, &testState, sizeof(struct gameState));
        -:   47:
        -:   48:
        1:   49:    thisPlayer = 0;
        1:   50:	playVillage(&testState, thisPlayer, 0);
call    0 returned 100%
        -:   51:
        -:   52:
        1:   53:    printf("TEST #1: Assert that each victory card has 8 cards in the supply, if not, abort program.\nPotential issue is base game is modified. Please reload base files if game has been altered.");
call    0 returned 100%
        1:   54:	assert(testState.supplyCount[estate] == 8);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        1:   55:	assert(testState.supplyCount[duchy] == 8);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        1:   56:	assert(testState.supplyCount[province] == 8);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   57:
        -:   58:	// Make sure kingdom cards are properly supplied.
       11:   59:	for(i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:	{
       10:   61:		kCardCount = testState.supplyCount[k[i]];
       10:   62:		printf("k[%d] count: %d\n", i, kCardCount);
call    0 returned 100%
        -:   63:		// assert(kCardCount = testState.supplyCount[k[i]]);
       10:   64:		if(kCardCount != testState.supplyCount[k[i]])
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   65:        {
    #####:   66:            allTestsPassed = 0;
        -:   67:        }
        -:   68:	}
        -:   69:
        1:   70:	if(allTestsPassed)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   71:        printf("Kingdom Card Supplies All Correct\n");
call    0 returned 100%
        -:   72:    else
    #####:   73:        printf("Incorrect number of kingdom cards. Please correct or reload base game files.\n");
call    0 never executed
        -:   74:
        -:   75:
        1:   76:	printf("TEST #2: Testing Num Action and Card Draw Increases...\n");
call    0 returned 100%
        1:   77:	if(testState.handCount[thisPlayer] == state.handCount[thisPlayer] + 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   78:    {
        1:   79:        printf("TEST #2: Cards Drawn Properly Increased.\n");
call    0 returned 100%
        -:   80:    }
        -:   81:	// assert(testState.handCount[thisPlayer] == state.handCount[thisPlayer] + 1);
        -:   82:	else
        -:   83:    {
    #####:   84:        printf("TEST #2: Cards Drawn Not Properly Increased.\n");
call    0 never executed
    #####:   85:        printf("Expected: %d\n", state.handCount[thisPlayer] +1);
call    0 never executed
    #####:   86:        printf("Result: %d\n\n", testState.handCount[thisPlayer]);
call    0 never executed
    #####:   87:        allTestsPassed = 0;
        -:   88:    }
        -:   89:
        1:   90:    if(testState.numActions == state.numActions + 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   91:    {
        1:   92:        printf("TEST #2: Number of actions are properly increased.\n");
call    0 returned 100%
        -:   93:    }
        -:   94:    else
        -:   95:    {
    #####:   96:        printf("TEST #2: Number of Actions not Properly Increased.\n");
call    0 never executed
    #####:   97:        printf("Expected: %d\n", state.numActions + 2);
call    0 never executed
    #####:   98:        printf("Result: %d\n\n", testState.numActions);
call    0 never executed
    #####:   99:        allTestsPassed = 0;
        -:  100:    }
        -:  101:
        -:  102:	// assert(testState.numActions == state.numActions + 2);
        -:  103:
        1:  104:	printf("TEST #3: Discard Test\n");
call    0 returned 100%
        -:  105:
        1:  106:	if(testState.discardCount[thisPlayer] == state.discardCount[thisPlayer] + 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  107:    {
    #####:  108:        printf("Test #3: Discard Test Passed.\n\n");
call    0 never executed
        -:  109:    }
        -:  110:    else
        -:  111:    {
        1:  112:        printf("TEST #3: Discard Test Failed!\nExpected: %d\n", state.discardCount[thisPlayer] + 1);
call    0 returned 100%
        1:  113:        printf("Result: %d\n\n", testState.discardCount[thisPlayer]);
call    0 returned 100%
        1:  114:        allTestsPassed = 0;
        -:  115:    }
        -:  116:
        1:  117:    if(allTestsPassed) printf("All tests passed!");
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        1:  118:    else printf("One or more tests failed, please review results and revise code.\n\n");
call    0 returned 100%
        -:  119:
        1:  120:	return 0;
        -:  121:
        -:  122:}
