        -:    0:Source:binsearch.c
        -:    0:Graph:binsearch.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:#include <stdio.h>
        -:    2:#include <assert.h>
    #####:    3:int binsearch(int a[], int n, int x)
        -:    4:{
    #####:    5:        int low = 0;
    #####:    6:        int high = n-1;
        -:    7:        int mid;
    #####:    8:        while(low <=  high)
        -:    9:        {
    #####:   10:                mid = (low + high) / 2;
    #####:   11:                if(a[mid] == x)
        -:   12:                {
    #####:   13:                        return mid;
        -:   14:                }
    #####:   15:                else if (x<a[mid])
        -:   16:                {
    #####:   17:                        high = mid - 1;
        -:   18:                }
        -:   19:                else
        -:   20:                {
    #####:   21:                        low = mid + 1;
        -:   22:                }
        -:   23:        }
    #####:   24:        return -1;
        -:   25:}
    #####:   26:void test()
        -:   27:{
    #####:   28:        int a[7] = {2,4,6,8,10,12,14};
    #####:   29:        int element_index = binsearch(a,7,4);
    #####:   30:        assert(element_index == 1);
    #####:   31:        element_index = binsearch(a,7,2);
    #####:   32:        assert(element_index == 0);
    #####:   33:        element_index = binsearch(a,7,10);
    #####:   34:        assert(element_index == 4);
    #####:   35:        element_index = binsearch(a,7,14);
    #####:   36:        assert(element_index == 6);
    #####:   37:        element_index = binsearch(a,7,28);
    #####:   38:        assert(element_index == -1);
    #####:   39:}
    #####:   40:int main()
        -:   41:{
    #####:   42:        test();
    #####:   43:        return 0;
        -:   44:}
