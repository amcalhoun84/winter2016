        -:    0:Source:smallsh.c
        -:    0:Graph:smallsh.gcno
        -:    0:Data:smallsh.gcda
        -:    0:Runs:166
        -:    0:Programs:1
        -:    1:/*
        -:    2:** Name: Andrew Michael Calhoun
        -:    3:** Assignment: Block 3, Small Shell - CS344-400
        -:    4:** Date: 2/15/2016
        -:    5:**
        -:    6:** Description: Creating a small, shell-like environment in C to do a variety
        -:    7:** of tasks, such as forking, multitasking/multiprocess management, and more.
        -:    8:** There are three basic commands to use, exit, cd, and status.
        -:    9:** I successfully finished the program and then curtailed the names of the
        -:   10:** functions and variables as a management challenge. Eventually I hope to try to
        -:   11:** "tiny" code this down to half it's current size.
        -:   12:
        -:   13:*/
        -:   14:#include <unistd.h>  // unix shell commands, exec(), execvp(), fork(), et al.
        -:   15:#include <stdlib.h>	// getenv()
        -:   16:#include <stdio.h>
        -:   17:#include <assert.h>
        -:   18:#include <string.h>	// strcmp(), strtok() -- all string related functions
        -:   19:#include <signal.h>
        -:   20:#include <fcntl.h>  // file control (from Lecture #12)
        -:   21:#include <signal.h> // from CS372, lecture #10
        -:   22:#include <sys/types.h>  // getpid()
        -:   23:#include <sys/wait.h>	// waitpid()
        -:   24:#include <sys/stat.h>
        -:   25:
        -:   26:#define DLM " \t\r\n\a"
        -:   27:#define CHRLM 2048
        -:   28:#define ARGLM 512
        -:   29:#define BUFFSIZE 64
        -:   30:#define DBG 0
        -:   31:#define NL NULL
        -:   32:
        -:   33:
        -:   34:// Create a linked to match up the children and have some flexibility to shut down background processes.
        -:   35:// based off patterns learned in CS 261
        -:   36:typedef struct bgChld {
        -:   37:	int bgPID; // child process ID
        -:   38:	struct bgChld *nxt;
        -:   39:
        -:   40:}bgChld;
        -:   41:
        -:   42:/* PROTOTYPES */
        -:   43:char *rdLn(); // reads user input
        -:   44:char **parse(char *input, int *numArgs);
        -:   45:int rdctSh(int inFlg, int oFlg);
        -:   46:int lnchSh(char **args, int numArgs, int bgP, int *sglFlg, int *trmSgl, bgChld *head);
        -:   47:int execSh(char **args, int numArgs, int *extFlg, int *sglFlg, int *trmSgl, bgChld *head);
        -:   48:int shExt(char **args);
        -:   49:void shSt();
        -:   50:void shBGLstInsrt(bgChld *ptr, int bgPID);
        -:   51:
        -:   52:/*
        -:   53:** Function: status()
        -:   54:** Description: Checks the status of the process IDs and background process IDs.
        -:   55:** Parameters: None
        -:   56:** Pre/Post: Process IDs exist and we need to be notified about them.
        -:   57:*/
        -:   58:
       88:   59:void shSt() {
        -:   60:	int pid, bgS; // process id and background stats
        -:   61:
        -:   62:	// check for background processes. Research based on http://stackoverflow.com/questions/13482416/linux-waitpid-wnohang-and-zombies.
        -:   63:	// For the record? I hate zombies. My programs will NOT be the cause of the zombie apocalypse.
        -:   64:	do {
       88:   65:		pid = waitpid(-1, &bgS, WNOHANG);
       88:   66:		if(pid > 0) {// uh-oh... something died... but will it stay DEAD?!
        2:   67:    		printf("Background PID %d has terminated: ", pid);
        2:   68:			if(WIFEXITED(bgS)) printf("Exited value: %d\n", WEXITSTATUS(bgS));  // Exited normally
        1:   69:			else if (WIFSIGNALED(bgS) != 0) printf("Terminated by signal %d\n", WTERMSIG(bgS)); // it was forcefully or otherwise terminated.
        -:   70:		}
       88:   71:    }while(pid > 0);
       86:   72:}
        -:   73:
        -:   74:/*
        -:   75:** Function: char readLine()
        -:   76:** Description: Function will get the user input and allocate it to the buffer via getline.
        -:   77:** Credit: http://stephen-brennan.com/2015/01/16/write-a-shell-in-c/
        -:   78:** Params: None
        -:   79:*/
        -:   80:
       86:   81:char *rdLn() {
       86:   82:	char *bff = NL;
       86:   83:	size_t bffSz = 0;
       86:   84:	getline(&bff, &bffSz, stdin);
       86:   85:	return bff;
        -:   86:}
        -:   87:
        -:   88:/* Function: char **prsLn
        -:   89:** Description: Based on stephen brennan's version of the function, it will take, store, and interpret
        -:   90:				the command line arguments and set the variable for the number of arguemnts.
        -:   91:				Credit: http://stephen-brennan.com/2015/01/16/write-a-shell-in-c/
        -:   92:	Paramaters: char *userInput, int *numArgs -- data is held in the memory, given we have
        -:   93:					multiple processes potentially running.
        -:   94:*/
        -:   95:
       86:   96:char **prsLn(char *input, int *numArgs) {
       86:   97:	int bffSz = BUFFSIZE;
       86:   98:	int pos = 0;
       86:   99:	char *tkn, **tkns = malloc(bffSz * sizeof(char*));	// token and tokens,
        -:  100:								// tkn is for individual characters, tokens is for the
        -:  101:								// string.
        -:  102:
       86:  103:	tkn = strtok(input, DLM);	// tokenize the string. Compares whatever is in the input
        -:  104:											// and the delimiters, and tokenizes it versus the delimiters.
        -:  105:											// remove \t or \n or \r or \a
        -:  106:
      434:  107:	while(tkn!=NL) { // NULL works -- tried '\0' and ran into a few weird problems.
      262:  108:		tkns[pos] = tkn;	// sets the tkns[pos] to whatever the character is. Helps recreate the string.
      262:  109:		pos++;
      262:  110:		if(pos>=bffSz) {
    #####:  111:			bffSz*=2;
    #####:  112:			tkns = realloc(tkns, bffSz * sizeof(char*));       // If our position overflows the buffer, we will go ahead and enlarge it.
        -:  113:
    #####:  114:        if(pos>=2147483647)            // Just to prevent stack overflow, given that a recent article came out about DNS overflows being a cause of malware attacks
        -:  115:        {
    #####:  116:            printf("System stack overflow, aborting.");
    #####:  117:            exit(1);
        -:  118:        }
        -:  119:
        -:  120:        }
        -:  121:
      262:  122:		tkn = strtok(NL, DLM);
        -:  123:	}
       86:  124:	tkns[pos] = NL;
       86:  125:	*numArgs = pos;
       86:  126:	return tkns;
        -:  127:}
        -:  128:
        -:  129:// LAUNCH SHELL
        -:  130:/* FUNCTION: lnchSh
        -:  131:** Description: Launches the not-otherwise-specified/hard coded processes and branches and forks as necessary.
        -:  132:** Allows us to do file inputs and outputs, multiple processes at once, and put processes in the background.
        -:  133:** Parameters: char **args, int numArgs, int *extFlg, int *sglFlg, int *trmSgl, struc bgChld *head
        -:  134:** Pre: The shell is given a command to run, such as cd, status, or exit. Interpreted by the execute shell function.
        -:  135:** Post: Command is run, and either a termination signal is called, or the user is prompted to enter another command.
        -:  136:*/
       82:  137:int lnchSh(char **args, int numArgs, int bgP, int *sglFlg, int *trmSgl, bgChld *head) {
        -:  138:	pid_t pid, wpid;
        -:  139:	int st;
       82:  140:	pid = fork();
        -:  141:	// Generate the Children
      164:  142:	if(pid == 0) {
        -:  143:		// researched sigaction -- http://man7.org/linux/man-pages/man2/sigaction.2.html
        -:  144:		struct sigaction a;
       82:  145:		a.sa_handler = SIG_DFL;
       82:  146:		a.sa_flags = 0;
       82:  147:		sigaction(SIGINT, &a, 0);
       82:  148:		int fd, inFlg = -1, oFlg = -1;
        -:  149:		// Counter for preventing a fault in case of background commands or other processes running.
       82:  150:		int cnt = numArgs;
       82:  151:		if(bgP==1) cnt=(numArgs-1);
        -:  152:
        -:  153:		int i;
      337:  154:		for(i=0;i<cnt;i++) {
      255:  155:			if(strcmp(args[i], "<") == 0) inFlg = i;
      253:  156:			else if(strcmp(args[i], ">") == 0) oFlg = i;
        -:  157:		}
       84:  158:		if((inFlg > -1) || (oFlg > -1))	{
        3:  159:			if(rdctSh(inFlg, oFlg) == 0) {	// based off of Pipes and Redirection - Lecture 12
        2:  160:				fd=open(args[inFlg + 1], O_RDONLY, 0644); // open file
        2:  161:				if(fd==-1) {
        1:  162:					printf("Cannot open %s\n", args[inFlg+1]);
        1:  163:					exit(1); // exit the child process
        -:  164:				}
        -:  165:				else {
        1:  166:					if(dup2(fd,0)==-1) {
    #####:  167:						printf("Could not redirect pipe to designated input file.\n");
    #####:  168:						exit(1); // exit the child process
        -:  169:					}
        1:  170:					args[inFlg] = NL;
        1:  171:					close(fd);
        -:  172:				}
        -:  173:			}
        -:  174:			else { // perform redirect for output
        1:  175:				fd = open(args[oFlg+1], O_WRONLY | O_CREAT | O_TRUNC, 0644);
        1:  176:				if(fd == -1) {
    #####:  177:					printf("smallsh: cannot open %s for output.\n", args[oFlg+1]);
    #####:  178:					exit(1); // exit the child process
        -:  179:				}
        -:  180:				else {
        1:  181:					if(dup2(fd, 1) == -1) {
    #####:  182:						printf("Cannot redirect stdout for output\n");
    #####:  183:						exit(1); // exit the child process
        -:  184:					}
        1:  185:					args[oFlg] = NL;    // My oldest foe. I =='d this ans it was driving me nuts, but it's fixed and we are good.
        1:  186:					close(fd);          // closing the file is good general practice.
        -:  187:				}
        -:  188:			}
        -:  189:	}
       79:  190:	else if((bgP==1)&&(inFlg<0)){      // If we have a Background Process, but nowhere to input.
        2:  191:		fd = open("/dev/null", O_RDONLY, 0644);
        2:  192:		if(fd == -1) {
    #####:  193:			printf("smallsh: cannot open \"/dev/null\"\n");
    #####:  194:			exit(1); // exit child process
        -:  195:		}
        -:  196:		else {
        2:  197:			if(dup2(fd, 0) == -1) {
    #####:  198:				printf("Could not redirect the input for \"/dev/null\".\n");
    #####:  199:				exit(1); // exit child process
        -:  200:			}
        2:  201:			close(fd);
        -:  202:			}
        -:  203:		}
        1:  204:		if(execvp(args[0], args) == -1 ) {          // If we can't find the file or directory, the whole thing stops.
        1:  205:				printf("smallsh: no such file or directory\n");
        1:  206:				exit(1);
        -:  207:		}
        -:  208:	}
        -:  209:	// Error forking
       82:  210:	else if (pid < 0) {
    #####:  211:		perror("error forking");  // perror.
        -:  212:		// return 1;
        -:  213:	}
        -:  214:	// Parent Processes
        -:  215:	else {
        -:  216:		do {
       82:  217:			if(bgP == 1) {
        2:  218:				shBGLstInsrt(head, pid);
        2:  219:				printf("BG process %d initiated.\n", pid);
        2:  220:				fflush(stdout); // flush the buffer
        -:  221:            }
       80:  222:			else wpid = waitpid(pid, &st, WUNTRACED);
       82:  223:		}while(!WIFEXITED(st) && !WIFSIGNALED(st)); // If the program is NOT terminated by signal or exited, we can keep going.
       82:  224:		if(WIFEXITED(st)) {
       82:  225:			*sglFlg = 0;    // if we want to exit, we set the signal flag to 0 to indicate to the program that we want to quit.
       82:  226:			return WEXITSTATUS(st);
        -:  227:		}
    #####:  228:		else if(WIFSIGNALED(st)) {
    #####:  229:			*sglFlg = 1;
    #####:  230:			*trmSgl = WTERMSIG(st); // If there is termination signal, we return 1, because we want to terminate a process..
    #####:  231:			return 1;
        -:  232:		}
    #####:  233:	} return 1;
        -:  234:}
        -:  235:
        -:  236:/* FUNCTION: EXECUTE SHELL
        -:  237:** Description: The processing function, before launching the shell command.
        -:  238:** Parameters: char **args, int numArgs, int *extFlg, int *sglFlg, int *trmSgl, struc bgChld *head
        -:  239:** Pre: The shell is given a command to run, such as cd, status, or exit.
        -:  240:** Post: Passes it to the shell launcher, where it is processed and the command is executed. */
       86:  241:int execSh(char **args, int numArgs, int *extFlg, int *sglFlg, int *trmSgl, bgChld *head) {
       86:  242:	int bgP=0;
        -:  243:	// Make sure there is nothing else running.
       86:  244:	if((args[0]==NL)||strcmp(args[0],"#")==0)return 1; // if command is empty
       86:  245:	else if(strcmp(args[0], "cd") == 0) {
        2:  246:		if(args[1]==NL)	{
        -:  247:			char* hmPth;
        1:  248:			hmPth = getenv("HOME");
        1:  249:			if(hmPth!=NL) chdir(hmPth);
        -:  250:		}
        -:  251:		else {
        1:  252:			if(chdir(args[1]) != 0)	{
    #####:  253:				printf("smallsh: could not find the directory.\n");
    #####:  254:				*extFlg = 1;
        -:  255:			}
        -:  256:		}
        2:  257:    return 1; // continue loop.
        -:  258:	}
       84:  259:	else if(strcmp(args[0], "status") == 0)	{ // Check Status
        1:  260:		if(*sglFlg == 0) printf("smallsh: exit value: %d\n", *extFlg); // Set the sign
    #####:  261:		else printf("smallsh: terminated by signal: %d\n", *trmSgl);
        1:  262:		return 1; // otherwise program will fall through
        -:  263:	}
       83:  264:	else if(strcmp(args[0], "exit") == 0) {
        1:  265:		return 0;	// end the loop. 0 = end, 1 = continue, as shStatus is a boolean int
        -:  266:	}
       82:  267:	if(strcmp(args[numArgs - 1], "&") == 0)	{
        2:  268:		bgP = 1;
        2:  269:		args[numArgs - 1] = NL;
        -:  270:	}
       82:  271:	*extFlg = lnchSh(args, numArgs, bgP, sglFlg, trmSgl, head);
       82:  272:	return 1;
        -:  273:}
        -:  274:
        -:  275:/* FUNCTION: rdctSh
        -:  276:** Redirect Shell
        -:  277:** Description: Redirects pipes to the needed process, so that we can have multiple processing running and waiting.
        -:  278:** Parameters: int inFlg, int oFlg
        -:  279:** Pre: There is an input/output command or another process is running/waiting and needs to be reached.
        -:  280:** Post: The process is redirected or called up.
        -:  281:*/
        -:  282:
        3:  283:int rdctSh(int inFlg, int oFlg) {
        3:  284:	if((inFlg > -1) && (oFlg > -1)) {
    #####:  285:		if(inFlg < oFlg) return 0;
    #####:  286:		else return 1;
        -:  287:	}
        3:  288:	else if((inFlg>-1)&&(oFlg==-1)) return 0;
        1:  289:	else return 1;
        -:  290:}
        -:  291:
        -:  292:/* Allows user to add or remove process IDs. Working on potentially
        -:  293:** advanced version that will allow them to kill / terminate speciic ones.
        -:  294:*/
        -:  295:
        -:  296:// Linked List for processes to make them easier to find and eliminate when they are no longer needed.
        -:  297:// Inputs are the struct bgChld ptr, and the bgPID. When we need to either insert or remove it, we call this
        -:  298:// function to
        -:  299:
        2:  300:void shBGLstInsrt(bgChld *ptr, int bgPID) {
        2:  301:	assert(ptr != NL);
        2:  302:    while(ptr->nxt != NL) ptr = ptr->nxt;
        2:  303:	ptr->nxt = (bgChld *)malloc(sizeof(bgChld));
        2:  304:	ptr = ptr->nxt;
        2:  305:	ptr->bgPID = bgPID;
        2:  306:	ptr->nxt = NL;
        2:  307:}
        -:  308:
        -:  309:/*
        -:  310:** Function: int main()
        -:  311:** Description: The primary executive function of the program, contains the loops and calls
        -:  312:** to run the various loops.
        -:  313:** Pre/Post: Execute program and exit.
        -:  314:*/
        -:  315:
        1:  316:int main() {
        -:  317:	bgChld *head, *cur;
        1:  318:	head = (bgChld *)malloc(sizeof(bgChld));
        1:  319:	cur = head;
        1:  320:	cur->bgPID = -1; // automatically default to non-extant.
        1:  321:	cur->nxt = NL;
        -:  322:
        -:  323:	char *input, **args;
        1:  324:	int numArgs, shS, extFlg = 0,
        1:  325:		sglFlg = 0, trmSgl;
        -:  326:
        -:  327:	// Signal Handler for SIGINT.
        -:  328:	struct sigaction a;
        1:  329:	a.sa_flags = 0;
        1:  330:	a.sa_handler = SIG_IGN; // signal ignore
        1:  331:	sigaction(SIGINT, &a, NL);
        -:  332:
        -:  333:	do { // tried with a while loop originally, didn't work out too well. Just went
        -:  334:		// straight back to the command prompt.
        -:  335:	    // check for background processes
       86:  336:		shSt();
       86:  337:		printf(": ");
       86:  338:		fflush(stdout); // flush the buffer and prompt, per directions
        -:  339:
       86:  340:		input = rdLn(); // read input
       86:  341:		args = prsLn(input, &numArgs);
       86:  342:        shS = execSh(args, numArgs, &extFlg, &sglFlg, &trmSgl, head);
       86:  343:		free(input);
       86:  344:		free(args);
       86:  345:	 } while(shS);
        -:  346:    // kill any background processes to prevent overwrite or orphans.
        1:  347:	cur = head;
        5:  348:	while (cur != NL) {
        3:  349:		if(cur->bgPID != -1) {
        2:  350:			kill(cur->bgPID, SIGKILL); // Kill that ZOMBIE
        -:  351:		}
        3:  352:		cur = cur->nxt;
        -:  353:	}
        5:  354:	while((cur = head) != NL) {
        3:  355:		head = head->nxt;
        3:  356:		free(cur);
        -:  357:	}
        1:  358:	return 0;
        -:  359:}
