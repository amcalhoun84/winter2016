        -:    0:Source:adventure.c
        -:    0:Graph:adventure.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:/*
        -:    2:Programmer: Andrew M. Calhoun
        -:    3:Email: calhouna@oregonstate.edu
        -:    4:Due Date: 2/8/2016
        -:    5:
        -:    6:Description: An old school adventure game, akin to Zork or Colossal Cave.
        -:    7:
        -:    8:*/
        -:    9:
        -:   10:
        -:   11:
        -:   12:
        -:   13:
        -:   14:#include <sys/types.h>  // for getpid()
        -:   15:#include <sys/stat.h>   // Creating directories properly
        -:   16:#include <dirent.h>     // for directory listing
        -:   17:#include <unistd.h>
        -:   18:#include <stdio.h>
        -:   19:#include <stdlib.h>
        -:   20:#include <errno.h>
        -:   21:#include <string.h>
        -:   22:
        -:   23:#define GAMESIZE 7 // Number of rooms
        -:   24:#define CONN 6      // Connections
        -:   25:#define SM_BUFF 20 // Buffer for 20 characters
        -:   26:#define BUFFER 32  // buffer for 32 characters
        -:   27:#define DESC 256   // buffer for room descriptions if they can be implemented
        -:   28:
        -:   29:
        -:   30:struct Rooms
        -:   31:{
        -:   32:    char name[BUFFER];
        -:   33:    int roomID, totalConnections, connections[CONN]; // each room has up 6 connections inclusive.
        -:   34:    char roomType[BUFFER]; // START_ROOM, MID_ROOM, END_ROOM;
        -:   35:    char roomDescription[DESC]; // to see if I can shoe-horn in room descriptions like the games of yore.
        -:   36:
        -:   37:};
        -:   38:
        -:   39:
        -:   40:// Function Prototypes
        -:   41:
        -:   42:char *createDir(int pid);
        -:   43:void createRooms();                                                       // create the rooms and writes them to file.
        -:   44:void interface(struct Rooms playGame[GAMESIZE]);                                     // The gameplay loop, generates the room.
        -:   45:int connectionCheck(struct Rooms curRoom, struct Rooms connectedRooms);  // Make sure rooms do not loop back into each other
        -:   46:void readFile(struct Rooms game[GAMESIZE], char *dirName);                       // Reads the rooms from file and back into the program, built based on https://www.cs.cf.ac.uk/Dave/C/node20.html and http://stackoverflow.com/questions/12489/how-do-you-get-a-directory-listing-in-c
        -:   47:// void print_struct(struct Rooms current_room[GAMESIZE], struct Rooms maze[GAMESIZE], struct Rooms descript[DESC]); // prints the room and description. -- not used.
        -:   48:void display(struct Rooms curRoom, struct Rooms game[GAMESIZE]);
        -:   49:void createFile(struct Rooms game[GAMESIZE]);
        -:   50:
        -:   51:/* Creates the directory where the maze data is stored.
        -:   52:** Function: createDir()
        -:   53:** Description: Creates directories and appends a process name.
        -:   54:** Parameters: the process ID variable.
        -:   55:*/
        -:   56:
    #####:   57:char *createDir(int pid)
        -:   58:{
    #####:   59:    char *dirName = malloc(BUFFER);
    #####:   60:    char *dirOutput = "calhouna.rooms";
        -:   61:
        -:   62:    // Create the directory with input name:
    #####:   63:    sprintf(dirName, dirOutput, pid);
        -:   64:    struct stat *st;
    #####:   65:    if(stat(dirName, st) == -1)
    #####:   66:        mkdir(dirName, 0755);   // create the directory and make it readable and accessible by the program.
    #####:   67:    return dirName;
        -:   68:}
        -:   69:
    #####:   70:void readFile(struct Rooms game[GAMESIZE], char *dirName)
        -:   71:{
    #####:   72:    int i, idx = 0;
        -:   73:    char roomNames[GAMESIZE][SM_BUFF];  // originally had [DESC] as well, but strncpy it did not like a 3D array.
        -:   74:
    #####:   75:    chdir(".."); // Make sure we go back to the correct directory
        -:   76:
        -:   77:    DIR *dir; // from dirent.h
        -:   78:    struct dirent *entry;
        -:   79:
    #####:   80:    if((dir = opendir(dirName)) != NULL)
        -:   81:    {
    #####:   82:        while((entry = readdir(dir)) != NULL)
        -:   83:        {
    #####:   84:          if((strcmp(entry->d_name, ".") == 0) || (strcmp(entry->d_name, "..")) == 0)
        -:   85:          {
    #####:   86:              continue;
        -:   87:          }
        -:   88:          else
        -:   89:          {
    #####:   90:              strncpy(roomNames[idx], entry->d_name, SM_BUFF);
    #####:   91:              idx++;
        -:   92:          }
        -:   93:      }
    #####:   94:    closedir(dir);
        -:   95:    }
        -:   96:
        -:   97:
        -:   98:    else
        -:   99:    {
    #####:  100:        printf("Cannot open directory.\n");
    #####:  101:        exit(1);
        -:  102:    }
        -:  103:
        -:  104:
        -:  105:
        -:  106:
    #####:  107:}
        -:  108:
        -:  109:
    #####:  110:int connectionCheck(struct Rooms curRoom, struct Rooms connectedRooms)
        -:  111:{
        -:  112:    int i;
        -:  113:
    #####:  114:    for(i=0; i < connectedRooms.totalConnections; i++)
        -:  115:    {
    #####:  116:        if(connectedRooms.connections[i] == curRoom.roomID)
    #####:  117:            return 1;
        -:  118:    }
        -:  119:
    #####:  120:    return 0;
        -:  121:}
        -:  122:
        -:  123:
    #####:  124:void createRooms()
        -:  125:{
    #####:  126:    int k, i, j, roomDuplicates = 1, pathDuplicate;
        -:  127:    int startRoom;
        -:  128:    int endRoom;
    #####:  129:    int differentRoom = 0;
        -:  130:    struct Rooms game[GAMESIZE];
        -:  131:  //  game.connection = roomDir;
        -:  132:
        -:  133:
    #####:  134:    char *places[] = { "OutsideHouse", "GrueCave", "MtDoom", "Lothlorien", "LoudRoom", "Fizzbuzz", "Forest" };
    #####:  135:    char *descriptions[GAMESIZE] = { "You are outside a white house, in an open field. There is a mailbox here.", "It's dark and dank in here. You also feel like you just might get eaten by a grue.", "Smoldering heat and lava are all over the place. Plus a hobbit is fighting with Gollum for a shiny trinket.", "A beautiful Elven holdfast, a delicate and reassuring melody echoes through the air.", "IT'S REALLY LOUD IN HERE! EVERYTHING ECHOES ECHOES ECHOES!!!!", "Oh no! The classic computer science student program! Run!", "Light dapples the ground as the sun shines through pine trees. You hear a song bird in the distance." };
        -:  136:    char gameRoom[GAMESIZE][SM_BUFF][DESC]; // variable for holding the place and description.
        -:  137:    char rooms[SM_BUFF];
        -:  138:
        -:  139:
        -:  140:
    #####:  141:    for(i=0; i< GAMESIZE; i++)
        -:  142:    {
    #####:  143:        while(roomDuplicates != 0)
        -:  144:        {
        -:  145:
    #####:  146:            int roomName = rand() % 10;
    #####:  147:            strncpy(rooms, places[roomName], SM_BUFF);
        -:  148:
    #####:  149:            roomDuplicates = 0;
        -:  150:
        -:  151:            int j;
    #####:  152:            for(j=0; j<GAMESIZE; j++)
        -:  153:            {
    #####:  154:                if(strcmp(places[j], rooms) == 0)
        -:  155:                {
    #####:  156:                    roomDuplicates = 1;
        -:  157:                }
        -:  158:            }
        -:  159:
    #####:  160:            if(roomDuplicates != 1)
        -:  161:            {
    #####:  162:                strncpy(places[i], rooms, SM_BUFF);
    #####:  163:                strncpy(game[i].name, rooms, SM_BUFF);
    #####:  164:                strncpy(game[i].roomDescription, descriptions[i], SM_BUFF);
    #####:  165:                strncpy(game[i].roomType, "MID_ROOM", SM_BUFF);
    #####:  166:                game[i].totalConnections = 0;
    #####:  167:                game[i].roomID = i;
        -:  168:            }
        -:  169:        }
        -:  170:    }
        -:  171:
    #####:  172:    startRoom = rand() % GAMESIZE;
        -:  173:
    #####:  174:    strncpy(game[startRoom].roomType, "START_ROOM", SM_BUFF); // set the start room.
        -:  175:
    #####:  176:    while(differentRoom != 1)
        -:  177:    {
    #####:  178:        endRoom = rand() % GAMESIZE;
        -:  179:
    #####:  180:        if(startRoom != endRoom)
        -:  181:        {
    #####:  182:            strncpy(game[endRoom].roomType, "END_ROOM", SM_BUFF);
    #####:  183:            differentRoom = 1;
        -:  184:        }
        -:  185:    }
        -:  186:
        -:  187:    /* CONNECTIONS */
        -:  188:
    #####:  189:    for(i=0; i<GAMESIZE; i++)
        -:  190:    {
        -:  191:
    #####:  192:        game[i].totalConnections = 3; // There must be at least three rooms connected at any given time.
        -:  193:        int used[GAMESIZE]; // local array for holding used rooms to prevent recursive connections and duplicates.
    #####:  194:        int idx = 0; // shorthand for index.
        -:  195:
    #####:  196:        for(j=0; j<GAMESIZE; j++)
        -:  197:        {
    #####:  198:            used[j] = 10;
        -:  199:        }
        -:  200:
    #####:  201:        used[idx] = i;
    #####:  202:        idx++;
        -:  203:
    #####:  204:        for(j=0; j<game[i].totalConnections; j++)
        -:  205:        {
    #####:  206:            int pathOK = 0;         // is the connection okay?
    #####:  207:            while (pathOK != 1)
        -:  208:            {
    #####:  209:                int route = rand() % GAMESIZE; // indicates a path to another room.
    #####:  210:                pathDuplicate = 0; // boolean false
    #####:  211:                for(k=0; k <  GAMESIZE; k++)
        -:  212:                {
    #####:  213:                    if(route == used[k])
        -:  214:                    {
    #####:  215:                        pathDuplicate = 1;
        -:  216:                    }
        -:  217:                }
    #####:  218:                if(pathDuplicate == 0)
        -:  219:                {
    #####:  220:                    game[i].connections[j] = route;
    #####:  221:                    used[idx] = route;
    #####:  222:                    idx++;
    #####:  223:                    pathOK = 1;
        -:  224:                }
        -:  225:
        -:  226:            }
        -:  227:        }
        -:  228:    }
        -:  229:
    #####:  230:    for(i = 0; i < GAMESIZE; i++)
        -:  231:    {
    #####:  232:        for(j=0; j<game[i].totalConnections; j++)
        -:  233:        {
    #####:  234:            int pathCheck = game[i].connections[j]; // Make sure the connections are valid.
    #####:  235:            if(connectionCheck(game[i], game[pathCheck]) == 0)
        -:  236:            {
    #####:  237:                int pathIdx = game[pathCheck].totalConnections; // check the path indices
        -:  238:
    #####:  239:                game[pathCheck].connections[pathIdx] = i;
    #####:  240:                game[pathCheck].totalConnections++;
        -:  241:            }
        -:  242:        }
        -:  243:    }
        -:  244:
    #####:  245:    createFile(game);
        -:  246:
    #####:  247:}
        -:  248:
        -:  249:/*
        -:  250:** Function: createFile
        -:  251:** Description: Writes the Rooms structures of the maze to a file.
        -:  252:** Parameters: the game struct array
        -:  253:*/
        -:  254:
    #####:  255:void createFile(struct Rooms game[GAMESIZE])
        -:  256:{
        -:  257:    FILE *fPtr;
        -:  258:
        -:  259:    int k, i, j;
    #####:  260:    for(i = 0; i < GAMESIZE; i++)
        -:  261:    {
        -:  262:        char fileName[SM_BUFF];
    #####:  263:        strncpy(fileName, game[i].name, SM_BUFF);
    #####:  264:        fprintf(fPtr, "ROOM NAME: %s\n", game[i].name);
    #####:  265:        fprintf(fPtr, "ROOM DESCRIPTION: %s\n", game[i].roomDescription);
        -:  266:
    #####:  267:        k = 1;
    #####:  268:        for(j = 0; j < game[i].totalConnections; j++)
        -:  269:        {
    #####:  270:            fprintf(fPtr, "CONNECTION %d: ", k);
    #####:  271:            fprintf(fPtr, "%s\n", game[game[i].connections[j]].name);
    #####:  272:            k++;
        -:  273:        }
        -:  274:
    #####:  275:        fprintf(fPtr, "ROOM TYPE: %s\n", game[i].roomType);
    #####:  276:        fclose(fPtr);
        -:  277:    }
    #####:  278:}
        -:  279:
        -:  280:/*
        -:  281:**  Function: display()
        -:  282:**  Description: prints the room and cconnections, as well as the travel prompt.
        -:  283:**  Parameters: the current room structure and the game structure for connections.
        -:  284:*/
        -:  285:
        -:  286:
    #####:  287:void display(struct Rooms curRoom, struct Rooms playGame[GAMESIZE])
        -:  288:{
        -:  289:    int i; // loop index
        -:  290:
    #####:  291:    printf("CURRENT LOCATION: %s\n", curRoom.name);
    #####:  292:    printf("POSSIBLE CONNECTIONS: ");
        -:  293:
    #####:  294:    for(i=0; i <  curRoom.totalConnections; i++)
        -:  295:    {
    #####:  296:        printf("%s", playGame[curRoom.connections[i]].name);
        -:  297:
    #####:  298:        if(i == curRoom.totalConnections - 1)
        -:  299:        {
    #####:  300:            printf(".\n");
        -:  301:        }
        -:  302:        else
        -:  303:        {
    #####:  304:            printf(", ");
        -:  305:        }
        -:  306:
        -:  307:    }
        -:  308:
    #####:  309:    printf("WHERE TO > ");
        -:  310:
    #####:  311:}
        -:  312:
        -:  313:/*
        -:  314:** Function: interface()
        -:  315:** Description: Will display the game, starting with the START_ROOM
        -:  316:**              validate user input, and play the game until the user
        -:  317:**              wins or quits the program.
        -:  318:** Parameters:  The game state array.
        -:  319:*/
        -:  320:
    #####:  321:void interface(struct Rooms playGame[GAMESIZE])
        -:  322:{
    #####:  323:    int i, j, current, start, end, steps = 0, gameOver = 0;
        -:  324:    char path[DESC][SM_BUFF]; // array to hold number of turns taken by player.
        -:  325:
    #####:  326:    printf("\n * * * * * * * * * * * * * * * * * * * * \n");
    #####:  327:    printf("*                                        * \n");
    #####:  328:    printf("*      WELCOME TO THE INCOMPREHENSIBLE   * \n");
    #####:  329:    printf("*               MAZE-THINGY              * \n");
    #####:  330:    printf("*                                        * \n");
    #####:  331:    printf(" * * * * * * * * * * * * * * * * * * * * \n");
        -:  332:
        -:  333:
    #####:  334:    for(i=0; i < GAMESIZE; i++)
        -:  335:    {
    #####:  336:        if(strcmp(playGame[i].roomType, "START_ROOM") == 0)
        -:  337:        {
    #####:  338:            start = i;
        -:  339:        }
        -:  340:
    #####:  341:        if(strcmp(playGame[i].roomType, "END_ROOM") == 0)
        -:  342:        {
    #####:  343:            end = i;
        -:  344:        }
        -:  345:
        -:  346:    }
        -:  347:
        -:  348:    /* MAIN LOOP */
        -:  349:
    #####:  350:    current = start;
    #####:  351:    while(gameOver != 1)
        -:  352:    {
    #####:  353:        display(playGame[current], playGame);
        -:  354:
        -:  355:        char line[DESC];
        -:  356:
    #####:  357:        if(fgets(line, sizeof(line), stdin))
        -:  358:        {
        -:  359:            char *position;
    #####:  360:            if((position = strchr(line, '\n')) != NULL)
    #####:  361:                *position = '\0';
        -:  362:
        -:  363:        }
        -:  364:
        -:  365:
    #####:  366:        int valid_input = 0;
        -:  367:
    #####:  368:        for(j=0; j < playGame[current].totalConnections; j++)
        -:  369:        {
    #####:  370:            if(strcmp(line, playGame[playGame[current].connections[j]].name) == 0) // make sure user input is valid
        -:  371:            {
    #####:  372:                valid_input = 1; // true
    #####:  373:                current = playGame[current].connections[j];
    #####:  374:                strncpy(path[steps], playGame[current].name, SM_BUFF);
    #####:  375:                steps++;
    #####:  376:                break;
        -:  377:            }
        -:  378:        }
        -:  379:
    #####:  380:        if(valid_input != 1) // invalid means you get a fun TRY AGAIN! message.
        -:  381:        {
    #####:  382:            printf("Uh, what? That's not a valid path or room. Please try again.\n");
        -:  383:        }
        -:  384:    }
        -:  385:
    #####:  386:    printf("\n");
        -:  387:
    #####:  388:    if(current = end)
        -:  389:    {
    #####:  390:        printf("\nCONGRATULATIONS! YOU HAVE ESCAPED MY INCOMPREHENISBLE MAZE!\n");
    #####:  391:        printf("YOUR PATH TO VICTORY TOOK %d STEPS! YOUR PATH WAS:\n", steps);
    #####:  392:        for(i=0; i < steps; i++)
        -:  393:        {
    #####:  394:            printf("%s\n", path[i]);
        -:  395:        }
        -:  396:
    #####:  397:        gameOver = 1;
        -:  398:    }
        -:  399:
    #####:  400:}
        -:  401:
    #####:  402:int main(void)
        -:  403:{
    #####:  404:    srand(time(NULL)); // seed the random generator
        -:  405:
        -:  406:    struct Rooms playGame[GAMESIZE];
        -:  407:
    #####:  408:    int pid = getpid(); // get the process ID.
    #####:  409:    createDir(pid);
        -:  410:    char dirName[BUFFER];
        -:  411:
    #####:  412:    createRooms();
    #####:  413:    readFile(playGame, dirName);
    #####:  414:    interface(playGame);
        -:  415:
    #####:  416:    return 0;
        -:  417:
        -:  418:}
        -:  419:
        -:  420:
